{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"USER_STATUS": {
				"enum": [
					"active",
					"inactive",
					"disabled",
					"pending"
				],
				"type": "string"
			},
			"AccountVerifyToken": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"userId": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"token": {
						"type": "string"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"deletedOn": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					}
				},
				"required": [
					"id",
					"token"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ForgottenPasswordToken": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"userId": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"token": {
						"type": "string"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"expiredOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"deletedOn": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					}
				},
				"required": [
					"id",
					"token"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TwoFactorSession": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"userId": {
						"type": "number",
						"format": "double"
					},
					"token": {
						"type": "string"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					}
				},
				"required": [
					"id",
					"userId",
					"token"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GeneratedSecret": {
				"properties": {
					"ascii": {
						"type": "string",
						"description": "ASCII representation of the secret"
					},
					"hex": {
						"type": "string",
						"description": "Hex representation of the secret"
					},
					"base32": {
						"type": "string",
						"description": "Base32 representation of the secret"
					},
					"qr_code_ascii": {
						"type": "string",
						"description": "URL for the QR code for the ASCII secret.",
						"deprecated": true
					},
					"qr_code_hex": {
						"type": "string",
						"description": "URL for the QR code for the hex secret.",
						"deprecated": true
					},
					"qr_code_base32": {
						"type": "string",
						"description": "URL for the QR code for the base32 secret.",
						"deprecated": true
					},
					"google_auth_qr": {
						"type": "string",
						"description": "URL for the Google Authenticator otpauth\nURL's QR code.",
						"deprecated": true
					},
					"otpauth_url": {
						"type": "string",
						"description": "Google Authenticator-compatible otpauth URL."
					}
				},
				"required": [
					"ascii",
					"hex",
					"base32",
					"google_auth_qr"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.never_": {
				"properties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"TwoFactorAuthentication": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"userId": {
						"type": "number",
						"format": "double"
					},
					"secret": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/GeneratedSecret"
							},
							{
								"$ref": "#/components/schemas/Record_string.never_"
							}
						],
						"nullable": true
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					}
				},
				"required": [
					"id",
					"userId",
					"secret"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Permission": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"updatedBy": {
						"type": "number",
						"format": "double",
						"nullable": true
					}
				},
				"required": [
					"id",
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TENANT_STATUS.ACTIVE": {
				"enum": [
					"active"
				],
				"type": "string"
			},
			"TENANT_STATUS.INACTIVE": {
				"enum": [
					"inactive"
				],
				"type": "string"
			},
			"DocumentType": {
				"type": "string",
				"enum": [
					"logo",
					"stamp",
					"signature",
					"avatar",
					"survey",
					"other",
					"plan",
					"pdf"
				]
			},
			"DocumentOwnerType": {
				"type": "string",
				"enum": [
					"user",
					"tenant",
					"contact",
					"company",
					"tender",
					null
				],
				"nullable": true
			},
			"Document": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string",
						"nullable": true
					},
					"preview": {
						"type": "string",
						"nullable": true
					},
					"type": {
						"$ref": "#/components/schemas/DocumentType"
					},
					"ownerId": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"ownerType": {
						"$ref": "#/components/schemas/DocumentOwnerType"
					},
					"data": {
						"type": "string"
					},
					"mimeType": {
						"type": "string"
					},
					"size": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					}
				},
				"required": [
					"type",
					"data",
					"mimeType"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Tenant": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"country": {
						"type": "string"
					},
					"region": {
						"type": "string",
						"nullable": true
					},
					"city": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"zipCode": {
						"type": "string"
					},
					"status": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/TENANT_STATUS.ACTIVE"
							},
							{
								"$ref": "#/components/schemas/TENANT_STATUS.INACTIVE"
							}
						]
					},
					"taxNumber": {
						"type": "string"
					},
					"registrationNumber": {
						"type": "string"
					},
					"bankAccount": {
						"type": "string",
						"nullable": true
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"updatedBy": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"documents": {
						"items": {
							"$ref": "#/components/schemas/Document"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"name",
					"email",
					"country",
					"city",
					"address",
					"zipCode",
					"status",
					"taxNumber",
					"registrationNumber"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Role": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"permissions": {
						"items": {
							"$ref": "#/components/schemas/Permission"
						},
						"type": "array"
					},
					"tenant": {
						"$ref": "#/components/schemas/Tenant"
					},
					"tenantId": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"updatedBy": {
						"type": "number",
						"format": "double",
						"nullable": true
					}
				},
				"required": [
					"id",
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Notifications": {
				"properties": {
					"userNew": {
						"type": "boolean"
					},
					"tenderNew": {
						"type": "boolean"
					},
					"contactNew": {
						"type": "boolean"
					},
					"userDelete": {
						"type": "boolean"
					},
					"userUpdate": {
						"type": "boolean"
					},
					"customerNew": {
						"type": "boolean"
					},
					"contactUpdate": {
						"type": "boolean"
					},
					"contractorNew": {
						"type": "boolean"
					},
					"customerUpdate": {
						"type": "boolean"
					},
					"tenderApproved": {
						"type": "boolean"
					},
					"userUpdateRole": {
						"type": "boolean"
					},
					"contractorUpdate": {
						"type": "boolean"
					},
					"tenderStatusChange": {
						"type": "boolean"
					},
					"permissionMatrixUpdate": {
						"type": "boolean"
					},
					"tenderAwaitingApproval": {
						"type": "boolean"
					}
				},
				"required": [
					"userNew",
					"tenderNew",
					"contactNew",
					"userDelete",
					"userUpdate",
					"customerNew",
					"contactUpdate",
					"contractorNew",
					"customerUpdate",
					"tenderApproved",
					"userUpdateRole",
					"contractorUpdate",
					"tenderStatusChange",
					"permissionMatrixUpdate",
					"tenderAwaitingApproval"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Partial_User_": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"email": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"phoneNumber": {
						"type": "string"
					},
					"salt": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/USER_STATUS"
					},
					"enableTwoFactor": {
						"type": "boolean"
					},
					"country": {
						"type": "string"
					},
					"region": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"zipCode": {
						"type": "string"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time"
					},
					"deletedOn": {
						"type": "string",
						"format": "date-time"
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"updatedBy": {
						"type": "number",
						"format": "double"
					},
					"deletedBy": {
						"type": "number",
						"format": "double"
					},
					"accountVerifyToken": {
						"$ref": "#/components/schemas/AccountVerifyToken"
					},
					"accountVerifyTokenId": {
						"type": "number",
						"format": "double"
					},
					"forgottenPasswordToken": {
						"$ref": "#/components/schemas/ForgottenPasswordToken"
					},
					"forgottenPasswordTokenId": {
						"type": "number",
						"format": "double"
					},
					"twoFactorSession": {
						"$ref": "#/components/schemas/TwoFactorSession"
					},
					"twoFactorSessionId": {
						"type": "number",
						"format": "double"
					},
					"twoFactorAuthentication": {
						"$ref": "#/components/schemas/TwoFactorAuthentication"
					},
					"twoFactorAuthenticationId": {
						"type": "number",
						"format": "double"
					},
					"role": {
						"$ref": "#/components/schemas/Role"
					},
					"roleId": {
						"type": "number",
						"format": "double"
					},
					"tenant": {
						"$ref": "#/components/schemas/Tenant"
					},
					"tenantId": {
						"type": "number",
						"format": "double"
					},
					"lastLoggedIn": {
						"type": "string",
						"format": "date-time"
					},
					"documents": {
						"items": {
							"$ref": "#/components/schemas/Document"
						},
						"type": "array"
					},
					"notifications": {
						"$ref": "#/components/schemas/Notifications"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Pick_User.Exclude_keyofUser.id-or-createdOn-or-updatedBy-or-updatedOn-or-deletedOn-or-deletedBy-or-accountVerifyToken-or-forgottenPasswordToken__": {
				"properties": {
					"email": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"phoneNumber": {
						"type": "string"
					},
					"salt": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/USER_STATUS"
					},
					"enableTwoFactor": {
						"type": "boolean"
					},
					"country": {
						"type": "string"
					},
					"region": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"zipCode": {
						"type": "string"
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"accountVerifyTokenId": {
						"type": "number",
						"format": "double"
					},
					"forgottenPasswordTokenId": {
						"type": "number",
						"format": "double"
					},
					"twoFactorSession": {
						"$ref": "#/components/schemas/TwoFactorSession"
					},
					"twoFactorSessionId": {
						"type": "number",
						"format": "double"
					},
					"twoFactorAuthentication": {
						"$ref": "#/components/schemas/TwoFactorAuthentication"
					},
					"twoFactorAuthenticationId": {
						"type": "number",
						"format": "double"
					},
					"role": {
						"$ref": "#/components/schemas/Role"
					},
					"roleId": {
						"type": "number",
						"format": "double"
					},
					"tenant": {
						"$ref": "#/components/schemas/Tenant"
					},
					"tenantId": {
						"type": "number",
						"format": "double"
					},
					"lastLoggedIn": {
						"type": "string",
						"format": "date-time"
					},
					"documents": {
						"items": {
							"$ref": "#/components/schemas/Document"
						},
						"type": "array"
					},
					"notifications": {
						"$ref": "#/components/schemas/Notifications"
					}
				},
				"required": [
					"email",
					"name",
					"phoneNumber"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_User.id-or-createdOn-or-updatedBy-or-updatedOn-or-deletedOn-or-deletedBy-or-accountVerifyToken-or-forgottenPasswordToken_": {
				"$ref": "#/components/schemas/Pick_User.Exclude_keyofUser.id-or-createdOn-or-updatedBy-or-updatedOn-or-deletedOn-or-deletedBy-or-accountVerifyToken-or-forgottenPasswordToken__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CreateUserProperties": {
				"$ref": "#/components/schemas/Omit_User.id-or-createdOn-or-updatedBy-or-updatedOn-or-deletedOn-or-deletedBy-or-accountVerifyToken-or-forgottenPasswordToken_"
			},
			"Pick_User.Exclude_keyofUser.id-or-createdOn-or-createdBy-or-updatedBy-or-updatedOn-or-deletedOn-or-deletedBy-or-email-or-password-or-accountVerifyToken-or-forgottenPasswordToken-or-lastLoggedIn__": {
				"properties": {
					"name": {
						"type": "string"
					},
					"phoneNumber": {
						"type": "string"
					},
					"salt": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/USER_STATUS"
					},
					"enableTwoFactor": {
						"type": "boolean"
					},
					"country": {
						"type": "string"
					},
					"region": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"zipCode": {
						"type": "string"
					},
					"accountVerifyTokenId": {
						"type": "number",
						"format": "double"
					},
					"forgottenPasswordTokenId": {
						"type": "number",
						"format": "double"
					},
					"twoFactorSession": {
						"$ref": "#/components/schemas/TwoFactorSession"
					},
					"twoFactorSessionId": {
						"type": "number",
						"format": "double"
					},
					"twoFactorAuthentication": {
						"$ref": "#/components/schemas/TwoFactorAuthentication"
					},
					"twoFactorAuthenticationId": {
						"type": "number",
						"format": "double"
					},
					"role": {
						"$ref": "#/components/schemas/Role"
					},
					"roleId": {
						"type": "number",
						"format": "double"
					},
					"tenant": {
						"$ref": "#/components/schemas/Tenant"
					},
					"tenantId": {
						"type": "number",
						"format": "double"
					},
					"documents": {
						"items": {
							"$ref": "#/components/schemas/Document"
						},
						"type": "array"
					},
					"notifications": {
						"$ref": "#/components/schemas/Notifications"
					}
				},
				"required": [
					"name",
					"phoneNumber"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_User.id-or-createdOn-or-createdBy-or-updatedBy-or-updatedOn-or-deletedOn-or-deletedBy-or-email-or-password-or-accountVerifyToken-or-forgottenPasswordToken-or-lastLoggedIn_": {
				"$ref": "#/components/schemas/Pick_User.Exclude_keyofUser.id-or-createdOn-or-createdBy-or-updatedBy-or-updatedOn-or-deletedOn-or-deletedBy-or-email-or-password-or-accountVerifyToken-or-forgottenPasswordToken-or-lastLoggedIn__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"UpdateUserProperties": {
				"$ref": "#/components/schemas/Omit_User.id-or-createdOn-or-createdBy-or-updatedBy-or-updatedOn-or-deletedOn-or-deletedBy-or-email-or-password-or-accountVerifyToken-or-forgottenPasswordToken-or-lastLoggedIn_"
			},
			"Pick_Document.Exclude_keyofDocument.id-or-createdOn-or-updatedOn__": {
				"properties": {
					"name": {
						"type": "string"
					},
					"preview": {
						"type": "string"
					},
					"type": {
						"$ref": "#/components/schemas/DocumentType"
					},
					"ownerId": {
						"type": "number",
						"format": "double"
					},
					"ownerType": {
						"$ref": "#/components/schemas/DocumentOwnerType"
					},
					"data": {
						"type": "string"
					},
					"mimeType": {
						"type": "string"
					},
					"size": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"type",
					"data",
					"mimeType"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Document.id-or-createdOn-or-updatedOn_": {
				"$ref": "#/components/schemas/Pick_Document.Exclude_keyofDocument.id-or-createdOn-or-updatedOn__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CreateDocumentProperties": {
				"$ref": "#/components/schemas/Omit_Document.id-or-createdOn-or-updatedOn_"
			},
			"UpdatePasswordProperties": {
				"properties": {
					"password": {
						"type": "string"
					},
					"newPassword": {
						"type": "string"
					}
				},
				"required": [
					"password",
					"newPassword"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TENDER_STATUS": {
				"enum": [
					"inquiry",
					"pending",
					"awaiting offer",
					"awaiting approval",
					"final",
					"sent",
					"ordered",
					"invalid",
					"under survey"
				],
				"type": "string"
			},
			"TENDER_CURRENCY": {
				"enum": [
					"huf",
					"eur",
					"usd"
				],
				"type": "string"
			},
			"COMPANY_STATUS.ACTIVE": {
				"enum": [
					"active"
				],
				"type": "string"
			},
			"COMPANY_STATUS.INACTIVE": {
				"enum": [
					"inactive"
				],
				"type": "string"
			},
			"COMPANY_TYPE.CONTRACTOR": {
				"enum": [
					"contractor"
				],
				"type": "string"
			},
			"COMPANY_TYPE.CUSTOMER": {
				"enum": [
					"customer"
				],
				"type": "string"
			},
			"Company": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"email": {
						"type": "string",
						"nullable": true
					},
					"country": {
						"type": "string"
					},
					"region": {
						"type": "string",
						"nullable": true
					},
					"city": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"zipCode": {
						"type": "string"
					},
					"status": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/COMPANY_STATUS.ACTIVE"
							},
							{
								"$ref": "#/components/schemas/COMPANY_STATUS.INACTIVE"
							}
						]
					},
					"type": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/COMPANY_TYPE.CONTRACTOR"
							},
							{
								"$ref": "#/components/schemas/COMPANY_TYPE.CUSTOMER"
							}
						]
					},
					"default": {
						"type": "boolean",
						"nullable": true
					},
					"taxNumber": {
						"type": "string",
						"nullable": true
					},
					"registrationNumber": {
						"type": "string",
						"nullable": true
					},
					"bankAccount": {
						"type": "string",
						"nullable": true
					},
					"prefix": {
						"type": "string",
						"nullable": true
					},
					"offerNum": {
						"type": "string",
						"nullable": true
					},
					"tenantId": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"notes": {
						"type": "string",
						"nullable": true
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"updatedBy": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"documents": {
						"items": {
							"$ref": "#/components/schemas/Document"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"name",
					"country",
					"city",
					"address",
					"zipCode",
					"status",
					"type"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LOCATION_STATUS.ACTIVE": {
				"enum": [
					"active"
				],
				"type": "string"
			},
			"LOCATION_STATUS.INACTIVE": {
				"enum": [
					"inactive"
				],
				"type": "string"
			},
			"Location": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"country": {
						"type": "string"
					},
					"region": {
						"type": "string",
						"nullable": true
					},
					"city": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"zipCode": {
						"type": "string"
					},
					"status": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/LOCATION_STATUS.ACTIVE"
							},
							{
								"$ref": "#/components/schemas/LOCATION_STATUS.INACTIVE"
							}
						]
					},
					"notes": {
						"type": "string",
						"nullable": true
					},
					"tenantId": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"updatedBy": {
						"type": "number",
						"format": "double",
						"nullable": true
					}
				},
				"required": [
					"id",
					"name",
					"country",
					"city",
					"address",
					"zipCode",
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"CONTACT_STATUS.ACTIVE": {
				"enum": [
					"active"
				],
				"type": "string"
			},
			"CONTACT_STATUS.INACTIVE": {
				"enum": [
					"inactive"
				],
				"type": "string"
			},
			"Contact": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"email": {
						"type": "string",
						"nullable": true
					},
					"phoneNumber": {
						"type": "string",
						"nullable": true
					},
					"status": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/CONTACT_STATUS.ACTIVE"
							},
							{
								"$ref": "#/components/schemas/CONTACT_STATUS.INACTIVE"
							}
						]
					},
					"notes": {
						"type": "string",
						"nullable": true
					},
					"tenantId": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"updatedBy": {
						"type": "number",
						"format": "double",
						"nullable": true
					}
				},
				"required": [
					"id",
					"name",
					"status"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TenderItem": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"quantity": {
						"type": "number",
						"format": "double"
					},
					"unit": {
						"type": "string"
					},
					"materialNetUnitAmount": {
						"type": "number",
						"format": "double"
					},
					"materialNetAmount": {
						"type": "number",
						"format": "double"
					},
					"materialActualNetAmount": {
						"type": "number",
						"format": "double"
					},
					"totalMaterialAmount": {
						"type": "number",
						"format": "double"
					},
					"feeNetUnitAmount": {
						"type": "number",
						"format": "double"
					},
					"feeNetAmount": {
						"type": "number",
						"format": "double"
					},
					"feeActualNetAmount": {
						"type": "number",
						"format": "double"
					},
					"totalFeeAmount": {
						"type": "number",
						"format": "double"
					},
					"tenderId": {
						"type": "number",
						"format": "double"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"updatedBy": {
						"type": "number",
						"format": "double",
						"nullable": true
					}
				},
				"required": [
					"id",
					"name",
					"quantity",
					"unit",
					"materialNetUnitAmount",
					"materialNetAmount",
					"materialActualNetAmount",
					"totalMaterialAmount",
					"feeNetUnitAmount",
					"feeNetAmount",
					"feeActualNetAmount",
					"totalFeeAmount",
					"tenderId"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Partial_Tender_": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"type": {
						"type": "string"
					},
					"number": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/TENDER_STATUS"
					},
					"fee": {
						"type": "number",
						"format": "double"
					},
					"returned": {
						"type": "boolean"
					},
					"vatKey": {
						"type": "string"
					},
					"currency": {
						"$ref": "#/components/schemas/TENDER_CURRENCY"
					},
					"surcharge": {
						"type": "number",
						"format": "double"
					},
					"discount": {
						"type": "number",
						"format": "double"
					},
					"validTo": {
						"type": "string",
						"format": "date-time"
					},
					"dueDate": {
						"type": "string",
						"format": "date-time"
					},
					"openDate": {
						"type": "string",
						"format": "date-time"
					},
					"startDate": {
						"type": "string",
						"format": "date-time"
					},
					"notes": {
						"type": "string"
					},
					"inquiry": {
						"type": "string"
					},
					"survey": {
						"type": "string"
					},
					"locationDescription": {
						"type": "string"
					},
					"toolRequirements": {
						"type": "string"
					},
					"otherComment": {
						"type": "string"
					},
					"customerId": {
						"type": "number",
						"format": "double"
					},
					"customer": {
						"$ref": "#/components/schemas/Company"
					},
					"contractorId": {
						"type": "number",
						"format": "double"
					},
					"contractor": {
						"$ref": "#/components/schemas/Company"
					},
					"locationId": {
						"type": "number",
						"format": "double"
					},
					"location": {
						"$ref": "#/components/schemas/Location"
					},
					"contactId": {
						"type": "number",
						"format": "double"
					},
					"contact": {
						"$ref": "#/components/schemas/Contact"
					},
					"tenant": {
						"$ref": "#/components/schemas/Tenant"
					},
					"tenantId": {
						"type": "number",
						"format": "double"
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/TenderItem"
						},
						"type": "array"
					},
					"documents": {
						"items": {
							"$ref": "#/components/schemas/Document"
						},
						"type": "array"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time"
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"updatedBy": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Pick_Tender.Exclude_keyofTender.id-or-createdOn-or-updatedBy-or-updatedOn__": {
				"properties": {
					"number": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/TENDER_STATUS"
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"tenant": {
						"$ref": "#/components/schemas/Tenant"
					},
					"tenantId": {
						"type": "number",
						"format": "double"
					},
					"documents": {
						"items": {
							"$ref": "#/components/schemas/Document"
						},
						"type": "array"
					},
					"survey": {
						"type": "string"
					},
					"contact": {
						"$ref": "#/components/schemas/Contact"
					},
					"type": {
						"type": "string"
					},
					"fee": {
						"type": "number",
						"format": "double"
					},
					"returned": {
						"type": "boolean"
					},
					"vatKey": {
						"type": "string"
					},
					"currency": {
						"$ref": "#/components/schemas/TENDER_CURRENCY"
					},
					"surcharge": {
						"type": "number",
						"format": "double"
					},
					"discount": {
						"type": "number",
						"format": "double"
					},
					"validTo": {
						"type": "string",
						"format": "date-time"
					},
					"dueDate": {
						"type": "string",
						"format": "date-time"
					},
					"openDate": {
						"type": "string",
						"format": "date-time"
					},
					"startDate": {
						"type": "string",
						"format": "date-time"
					},
					"notes": {
						"type": "string"
					},
					"inquiry": {
						"type": "string"
					},
					"locationDescription": {
						"type": "string"
					},
					"toolRequirements": {
						"type": "string"
					},
					"otherComment": {
						"type": "string"
					},
					"customerId": {
						"type": "number",
						"format": "double"
					},
					"customer": {
						"$ref": "#/components/schemas/Company"
					},
					"contractorId": {
						"type": "number",
						"format": "double"
					},
					"contractor": {
						"$ref": "#/components/schemas/Company"
					},
					"locationId": {
						"type": "number",
						"format": "double"
					},
					"location": {
						"$ref": "#/components/schemas/Location"
					},
					"contactId": {
						"type": "number",
						"format": "double"
					},
					"items": {
						"items": {
							"$ref": "#/components/schemas/TenderItem"
						},
						"type": "array"
					}
				},
				"required": [
					"status",
					"type",
					"returned",
					"vatKey",
					"currency"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Tender.id-or-createdOn-or-updatedBy-or-updatedOn_": {
				"$ref": "#/components/schemas/Pick_Tender.Exclude_keyofTender.id-or-createdOn-or-updatedBy-or-updatedOn__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CreateTenderProperties": {
				"$ref": "#/components/schemas/Omit_Tender.id-or-createdOn-or-updatedBy-or-updatedOn_"
			},
			"Partial_TenderItem_": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"quantity": {
						"type": "number",
						"format": "double"
					},
					"unit": {
						"type": "string"
					},
					"materialNetUnitAmount": {
						"type": "number",
						"format": "double"
					},
					"materialNetAmount": {
						"type": "number",
						"format": "double"
					},
					"materialActualNetAmount": {
						"type": "number",
						"format": "double"
					},
					"totalMaterialAmount": {
						"type": "number",
						"format": "double"
					},
					"feeNetUnitAmount": {
						"type": "number",
						"format": "double"
					},
					"feeNetAmount": {
						"type": "number",
						"format": "double"
					},
					"feeActualNetAmount": {
						"type": "number",
						"format": "double"
					},
					"totalFeeAmount": {
						"type": "number",
						"format": "double"
					},
					"tenderId": {
						"type": "number",
						"format": "double"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time"
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"updatedBy": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Pick_TenderItem.Exclude_keyofTenderItem.id-or-createdOn-or-updatedBy-or-updatedOn__": {
				"properties": {
					"name": {
						"type": "string"
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"quantity": {
						"type": "number",
						"format": "double"
					},
					"unit": {
						"type": "string"
					},
					"materialNetUnitAmount": {
						"type": "number",
						"format": "double"
					},
					"materialNetAmount": {
						"type": "number",
						"format": "double"
					},
					"materialActualNetAmount": {
						"type": "number",
						"format": "double"
					},
					"totalMaterialAmount": {
						"type": "number",
						"format": "double"
					},
					"feeNetUnitAmount": {
						"type": "number",
						"format": "double"
					},
					"feeNetAmount": {
						"type": "number",
						"format": "double"
					},
					"feeActualNetAmount": {
						"type": "number",
						"format": "double"
					},
					"totalFeeAmount": {
						"type": "number",
						"format": "double"
					},
					"tenderId": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"name",
					"quantity",
					"unit",
					"materialNetUnitAmount",
					"materialNetAmount",
					"materialActualNetAmount",
					"totalMaterialAmount",
					"feeNetUnitAmount",
					"feeNetAmount",
					"feeActualNetAmount",
					"totalFeeAmount",
					"tenderId"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_TenderItem.id-or-createdOn-or-updatedBy-or-updatedOn_": {
				"$ref": "#/components/schemas/Pick_TenderItem.Exclude_keyofTenderItem.id-or-createdOn-or-updatedBy-or-updatedOn__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CreateTenderItemProperties": {
				"$ref": "#/components/schemas/Omit_TenderItem.id-or-createdOn-or-updatedBy-or-updatedOn_"
			},
			"Partial_TenderItem-or-null_": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"quantity": {
						"type": "number",
						"format": "double"
					},
					"unit": {
						"type": "string"
					},
					"materialNetUnitAmount": {
						"type": "number",
						"format": "double"
					},
					"materialNetAmount": {
						"type": "number",
						"format": "double"
					},
					"materialActualNetAmount": {
						"type": "number",
						"format": "double"
					},
					"totalMaterialAmount": {
						"type": "number",
						"format": "double"
					},
					"feeNetUnitAmount": {
						"type": "number",
						"format": "double"
					},
					"feeNetAmount": {
						"type": "number",
						"format": "double"
					},
					"feeActualNetAmount": {
						"type": "number",
						"format": "double"
					},
					"totalFeeAmount": {
						"type": "number",
						"format": "double"
					},
					"tenderId": {
						"type": "number",
						"format": "double"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time"
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"updatedBy": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Partial_Document_": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"preview": {
						"type": "string"
					},
					"type": {
						"$ref": "#/components/schemas/DocumentType"
					},
					"ownerId": {
						"type": "number",
						"format": "double"
					},
					"ownerType": {
						"$ref": "#/components/schemas/DocumentOwnerType"
					},
					"data": {
						"type": "string"
					},
					"mimeType": {
						"type": "string"
					},
					"size": {
						"type": "number",
						"format": "double"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Record_string.unknown_": {
				"properties": {},
				"additionalProperties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"Partial_Journey_": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"activity": {
						"type": "string"
					},
					"property": {
						"type": "string"
					},
					"existed": {
						"type": "string"
					},
					"updated": {
						"type": "string"
					},
					"notes": {
						"$ref": "#/components/schemas/Record_string.unknown_"
					},
					"ownerType": {
						"type": "string"
					},
					"ownerId": {
						"type": "number",
						"format": "double"
					},
					"username": {
						"type": "string"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"TENANT_STATUS": {
				"enum": [
					"active",
					"inactive"
				],
				"type": "string"
			},
			"Partial_Tenant_": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"country": {
						"type": "string"
					},
					"region": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"zipCode": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/TENANT_STATUS"
					},
					"taxNumber": {
						"type": "string"
					},
					"registrationNumber": {
						"type": "string"
					},
					"bankAccount": {
						"type": "string"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time"
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"updatedBy": {
						"type": "number",
						"format": "double"
					},
					"documents": {
						"items": {
							"$ref": "#/components/schemas/Document"
						},
						"type": "array"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Pick_Tenant.Exclude_keyofTenant.id-or-createdOn-or-createdBy-or-updatedBy-or-updatedOn__": {
				"properties": {
					"email": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/TENANT_STATUS"
					},
					"country": {
						"type": "string"
					},
					"region": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"zipCode": {
						"type": "string"
					},
					"documents": {
						"items": {
							"$ref": "#/components/schemas/Document"
						},
						"type": "array"
					},
					"taxNumber": {
						"type": "string"
					},
					"registrationNumber": {
						"type": "string"
					},
					"bankAccount": {
						"type": "string"
					}
				},
				"required": [
					"email",
					"name",
					"status",
					"country",
					"city",
					"address",
					"zipCode",
					"taxNumber",
					"registrationNumber"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Tenant.id-or-createdOn-or-createdBy-or-updatedBy-or-updatedOn_": {
				"$ref": "#/components/schemas/Pick_Tenant.Exclude_keyofTenant.id-or-createdOn-or-createdBy-or-updatedBy-or-updatedOn__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CreateTenantProperties": {
				"$ref": "#/components/schemas/Omit_Tenant.id-or-createdOn-or-createdBy-or-updatedBy-or-updatedOn_"
			},
			"Partial_Role_": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"permissions": {
						"items": {
							"$ref": "#/components/schemas/Permission"
						},
						"type": "array"
					},
					"tenant": {
						"$ref": "#/components/schemas/Tenant"
					},
					"tenantId": {
						"type": "number",
						"format": "double"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time"
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"updatedBy": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"SetRolePermissionsProperties": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"permissions": {
						"items": {
							"properties": {
								"id": {
									"type": "number",
									"format": "double"
								}
							},
							"required": [
								"id"
							],
							"type": "object"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"permissions"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LOCATION_STATUS": {
				"enum": [
					"active",
					"inactive"
				],
				"type": "string"
			},
			"Partial_Location_": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"country": {
						"type": "string"
					},
					"region": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"zipCode": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/LOCATION_STATUS"
					},
					"notes": {
						"type": "string"
					},
					"tenantId": {
						"type": "number",
						"format": "double"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time"
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"updatedBy": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Pick_Location.Exclude_keyofLocation.id-or-createdOn-or-updatedBy-or-updatedOn__": {
				"properties": {
					"name": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/LOCATION_STATUS"
					},
					"country": {
						"type": "string"
					},
					"region": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"zipCode": {
						"type": "string"
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"tenantId": {
						"type": "number",
						"format": "double"
					},
					"notes": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"status",
					"country",
					"city",
					"address",
					"zipCode"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Location.id-or-createdOn-or-updatedBy-or-updatedOn_": {
				"$ref": "#/components/schemas/Pick_Location.Exclude_keyofLocation.id-or-createdOn-or-updatedBy-or-updatedOn__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CreateLocationProperties": {
				"$ref": "#/components/schemas/Omit_Location.id-or-createdOn-or-updatedBy-or-updatedOn_"
			},
			"CONTACT_STATUS": {
				"enum": [
					"active",
					"inactive"
				],
				"type": "string"
			},
			"Partial_Contact_": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"phoneNumber": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/CONTACT_STATUS"
					},
					"notes": {
						"type": "string"
					},
					"tenantId": {
						"type": "number",
						"format": "double"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time"
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"updatedBy": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Pick_Contact.Exclude_keyofContact.id-or-createdAt-or-createdOn-or-updatedBy-or-updatedOn__": {
				"properties": {
					"email": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"phoneNumber": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/CONTACT_STATUS"
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"tenantId": {
						"type": "number",
						"format": "double"
					},
					"notes": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"status"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Contact.id-or-createdAt-or-createdOn-or-updatedBy-or-updatedOn_": {
				"$ref": "#/components/schemas/Pick_Contact.Exclude_keyofContact.id-or-createdAt-or-createdOn-or-updatedBy-or-updatedOn__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CreateContactProperties": {
				"$ref": "#/components/schemas/Omit_Contact.id-or-createdAt-or-createdOn-or-updatedBy-or-updatedOn_"
			},
			"COMPANY_STATUS": {
				"enum": [
					"active",
					"inactive"
				],
				"type": "string"
			},
			"COMPANY_TYPE": {
				"enum": [
					"customer",
					"contractor"
				],
				"type": "string"
			},
			"Partial_Company_": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"country": {
						"type": "string"
					},
					"region": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"zipCode": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/COMPANY_STATUS"
					},
					"type": {
						"$ref": "#/components/schemas/COMPANY_TYPE"
					},
					"default": {
						"type": "boolean"
					},
					"taxNumber": {
						"type": "string"
					},
					"registrationNumber": {
						"type": "string"
					},
					"bankAccount": {
						"type": "string"
					},
					"prefix": {
						"type": "string"
					},
					"offerNum": {
						"type": "string"
					},
					"tenantId": {
						"type": "number",
						"format": "double"
					},
					"notes": {
						"type": "string"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time"
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"updatedBy": {
						"type": "number",
						"format": "double"
					},
					"documents": {
						"items": {
							"$ref": "#/components/schemas/Document"
						},
						"type": "array"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Pick_Company.Exclude_keyofCompany.id-or-createdOn-or-updatedBy-or-updatedOn__": {
				"properties": {
					"email": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/COMPANY_STATUS"
					},
					"country": {
						"type": "string"
					},
					"region": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"zipCode": {
						"type": "string"
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"tenantId": {
						"type": "number",
						"format": "double"
					},
					"documents": {
						"items": {
							"$ref": "#/components/schemas/Document"
						},
						"type": "array"
					},
					"type": {
						"$ref": "#/components/schemas/COMPANY_TYPE"
					},
					"notes": {
						"type": "string"
					},
					"taxNumber": {
						"type": "string"
					},
					"registrationNumber": {
						"type": "string"
					},
					"bankAccount": {
						"type": "string"
					},
					"default": {
						"type": "boolean"
					},
					"prefix": {
						"type": "string"
					},
					"offerNum": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"status",
					"country",
					"city",
					"address",
					"zipCode",
					"type"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Company.id-or-createdOn-or-updatedBy-or-updatedOn_": {
				"$ref": "#/components/schemas/Pick_Company.Exclude_keyofCompany.id-or-createdOn-or-updatedBy-or-updatedOn__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CreateCompanyProperties": {
				"$ref": "#/components/schemas/Omit_Company.id-or-createdOn-or-updatedBy-or-updatedOn_"
			},
			"LoginResponse": {
				"properties": {
					"accessToken": {
						"type": "string"
					},
					"refreshToken": {
						"type": "string"
					},
					"twoFactorAuthenticationEnabled": {
						"type": "boolean"
					},
					"session": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"LoginRequest": {
				"properties": {
					"email": {
						"type": "string",
						"pattern": "^(.+)@(.+)$"
					},
					"password": {
						"type": "string",
						"minLength": 1
					}
				},
				"required": [
					"email",
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Login2FaRequest": {
				"properties": {
					"token": {
						"type": "string"
					},
					"session": {
						"type": "string"
					}
				},
				"required": [
					"token",
					"session"
				],
				"type": "object",
				"additionalProperties": false
			},
			"VerifyAccountResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"VerifyAccountRequest": {
				"properties": {
					"password": {
						"type": "string",
						"minLength": 1
					}
				},
				"required": [
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RefreshTokenResponse": {
				"properties": {
					"accessToken": {
						"type": "string"
					}
				},
				"required": [
					"accessToken"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LogoutResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ForgottenPasswordResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ForgottenPasswordRequest": {
				"properties": {
					"email": {
						"type": "string",
						"pattern": "^(.+)@(.+)$"
					}
				},
				"required": [
					"email"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResetPasswordResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResetPasswordRequest": {
				"properties": {
					"password": {
						"type": "string",
						"minLength": 1
					}
				},
				"required": [
					"password"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"bearerAuth": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	},
	"info": {
		"title": "Vilkrig x Alpinnovacio CRM API",
		"version": "1.0.0",
		"license": {
			"name": "UNLICENSED"
		},
		"contact": {}
	},
	"paths": {
		"/version": {
			"get": {
				"operationId": "Get",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Retrieves the current version of the application or service.\nThis endpoint is typically used for health checks or monitoring the version of the deployed application.",
				"tags": [
					"Version"
				],
				"security": [],
				"parameters": []
			}
		},
		"/users": {
			"get": {
				"operationId": "GetUsers",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Partial_User_"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Retrieves a list of users.\nSecured with JWT token and requires \"User:List\" permission.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwtToken": [
							"User:List",
							"Tenant"
						]
					}
				],
				"parameters": []
			},
			"post": {
				"operationId": "CreateUser",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Partial_User_"
								}
							}
						}
					}
				},
				"description": "Creates a new user.\nSecured with JWT token and requires \"User:Create\" permission.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwtToken": [
							"User:Create",
							"Tenant"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "Properties required to create a user.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateUserProperties",
								"description": "Properties required to create a user."
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteUsers",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Deletes multiple users by their IDs.\nSecured with JWT token and requires \"User:Delete\" permission.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwtToken": [
							"User:Delete",
							"Tenant"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "An object containing an array of user IDs to delete.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"ids": {
										"items": {
											"type": "number",
											"format": "double"
										},
										"type": "array"
									}
								},
								"required": [
									"ids"
								],
								"type": "object",
								"description": "An object containing an array of user IDs to delete."
							}
						}
					}
				}
			}
		},
		"/users/{id}": {
			"put": {
				"operationId": "UpdateUser",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Partial_User_"
								}
							}
						}
					}
				},
				"description": "Updates an existing user.\nSecured with JWT token and requires \"User:Update\" permission.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwtToken": [
							"User:Update",
							"Me:*",
							"Tenant"
						]
					}
				],
				"parameters": [
					{
						"description": "The ID of the user to update.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "Properties to update in the user.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateUserProperties",
								"description": "Properties to update in the user."
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetUser",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Partial_User_"
								}
							}
						}
					}
				},
				"description": "Retrieves a single user by ID.\nSecured with JWT token and requires \"User:Get\" permission.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwtToken": [
							"User:Get",
							"Me:*",
							"Tenant"
						]
					}
				],
				"parameters": [
					{
						"description": "The ID of the user to retrieve.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Deletes a user by ID.\nSecured with JWT token and requires \"User:Delete\" permission.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwtToken": [
							"User:Delete",
							"Me:*",
							"Tenant"
						]
					}
				],
				"parameters": [
					{
						"description": "The ID of the user to delete.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/users/{id}/avatar": {
			"put": {
				"operationId": "UpdateUserProfilePicture",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"uploaded": {
											"type": "boolean"
										}
									},
									"required": [
										"uploaded"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Updates the profile picture of a user by ID.\nSecured with JWT token and requires \"User:Update\" or \"Me:*\" permission.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwtToken": [
							"User:Update",
							"Me:*",
							"Tenant"
						]
					}
				],
				"parameters": [
					{
						"description": "The ID of the user to update the profile picture.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "The properties to update the profile picture.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateDocumentProperties",
								"description": "The properties to update the profile picture."
							}
						}
					}
				}
			}
		},
		"/users/{id}/new-password": {
			"put": {
				"operationId": "UpdateUserPassword",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Updates the password of a user by ID.\nSecured with JWT token and requires \"User:Update\" or \"Me:*\" permission.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwtToken": [
							"User:Update",
							"Me:*",
							"Tenant"
						]
					}
				],
				"parameters": [
					{
						"description": "The ID of the user to update the password.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "The new password properties.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdatePasswordProperties",
								"description": "The new password properties."
							}
						}
					}
				}
			}
		},
		"/users/{id}/resend-verification-email": {
			"put": {
				"operationId": "ResendVerificationEmail",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Resends the verification email for a user by ID.\nSecured with JWT token and requires \"User:Update\" permission.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwtToken": [
							"User:Update",
							"Tenant"
						]
					}
				],
				"parameters": [
					{
						"description": "The ID of the user to resend the verification email.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/users/{id}/two-factor-authentication": {
			"post": {
				"operationId": "GenerateTwoFactorAuthenticationConfig",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"qrCode": {
											"type": "string"
										},
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"qrCode",
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Sets up two-factor authentication for a user by ID.\nSecured with JWT token and requires \"User:Update\" or \"Me:*\" permission.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwtToken": [
							"User:Update",
							"Me:*"
						]
					}
				],
				"parameters": [
					{
						"description": "The ID of the user to set up two-factor authentication.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"put": {
				"operationId": "EnableTwoFactorAuthentication",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Enables two-factor authentication for a user by ID.\nThis endpoint is secured with JWT authentication and requires \"User:Update\" or \"Me:*\" permissions,\nindicating that the user can set up two-factor authentication for themselves or it can be set by an administrator.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwtToken": [
							"User:Update",
							"Me:*"
						]
					}
				],
				"parameters": [
					{
						"description": "The ID of the user to enable two-factor authentication for.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "An object containing the verification code necessary to enable two-factor authentication.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"code": {
										"type": "string"
									}
								},
								"required": [
									"code"
								],
								"type": "object",
								"description": "An object containing the verification code necessary to enable two-factor authentication."
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DisableTwoFactorAuthentication",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Disables two-factor authentication for a user by ID.\nSecured with JWT authentication and requires \"User:Update\" or \"Me:*\" permission,\nallowing users to disable two-factor authentication for themselves or an administrator to do so.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwtToken": [
							"User:Update",
							"Me:*"
						]
					}
				],
				"parameters": [
					{
						"description": "The ID of the user for whom to disable two-factor authentication.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/users/{id}/notifications": {
			"put": {
				"operationId": "UpdateNotifications",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Notifications"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Updates notification settings for a user by ID.\nSecured with JWT token and requires \"Me:*\" permission, indicating that users can update their own notification settings.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwtToken": [
							"Me:*"
						]
					}
				],
				"parameters": [
					{
						"description": "The ID of the user whose notification settings are to be updated.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "A record of settings indicating the types of notifications and whether they should be enabled or disabled.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Notifications",
								"description": "A record of settings indicating the types of notifications and whether they should be enabled or disabled."
							}
						}
					}
				}
			}
		},
		"/tenders": {
			"post": {
				"operationId": "CreateTender",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Tender_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Creates a new tender with the provided properties. This operation is secured and\nrequires a JWT token with \"Tender:Create\" permission.",
				"tags": [
					"Tender"
				],
				"security": [
					{
						"jwtToken": [
							"Tender:Create"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "The properties required to create a new tender.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateTenderProperties",
								"description": "The properties required to create a new tender."
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetTenders",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Partial_Tender_"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Retrieves a list of all tenders within the system. This endpoint requires\nauthentication and is protected by JWT tokens with the \"Tender:List\" permission.",
				"tags": [
					"Tender"
				],
				"security": [
					{
						"jwtToken": [
							"Tender:List"
						]
					}
				],
				"parameters": []
			},
			"delete": {
				"operationId": "DeleteTenders",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Deletes multiple tenders based on the provided array of IDs. This operation requires\nauthentication and \"Tender:Delete\" permission. The deletion affects only the tenders\nassociated with the authenticated user's tenant.",
				"tags": [
					"Tender"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Tender:Delete"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "An object containing an array of tender IDs to delete.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"ids": {
										"items": {
											"type": "number",
											"format": "double"
										},
										"type": "array"
									}
								},
								"required": [
									"ids"
								],
								"type": "object",
								"description": "An object containing an array of tender IDs to delete."
							}
						}
					}
				}
			}
		},
		"/tenders/{id}/copy": {
			"post": {
				"operationId": "CopyTender",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Tender_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Copies an existing tender based on its ID. This operation is secured and\nrequires a JWT token with \"Tender:Create\" permission.",
				"tags": [
					"Tender"
				],
				"security": [
					{
						"jwtToken": [
							"Tender:Create"
						]
					}
				],
				"parameters": [
					{
						"description": "The unique identifier of the tender to be copied.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/tenders/{id}/send": {
			"post": {
				"operationId": "SendEmail",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Sends an email with details about a specific tender. Secured with a JWT token and requires \"Tender:Create\" permission.\nThis method is typically used for notifying stakeholders about tender updates or invitations to tender.",
				"tags": [
					"Tender"
				],
				"security": [
					{
						"jwtToken": [
							"Tender:Create"
						]
					}
				],
				"parameters": [
					{
						"description": "The unique identifier of the tender to send.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "Contains the message to be included in the email.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"message": {
										"type": "string"
									}
								},
								"required": [
									"message"
								],
								"type": "object",
								"description": "Contains the message to be included in the email."
							}
						}
					}
				}
			}
		},
		"/tenders/{id}": {
			"get": {
				"operationId": "GetTender",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Tender_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Retrieves detailed information about a specific tender by their ID.\nThis endpoint is protected by JWT authentication, requiring \"Tender:Get\" permission.",
				"tags": [
					"Tender"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Tender:Get"
						]
					}
				],
				"parameters": [
					{
						"description": "The unique identifier of the tender to retrieve.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateTender",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Tender_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Updates the information of an existing tender, identified by their ID. Access to this\nendpoint is restricted to authenticated requests with \"Tender:Update\" permission.",
				"tags": [
					"Tender"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant:Update"
						]
					}
				],
				"parameters": [
					{
						"description": "The unique identifier of the tender to update.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "A partial tender object containing the fields to update.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Partial_Tender_",
								"description": "A partial tender object containing the fields to update."
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteTender",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Deletes a single tender identified by their ID. This endpoint is secured with JWT authentication\nand requires \"Tender:Delete\" permission. The operation is restricted to tenders within the\nauthenticated user's tenant.",
				"tags": [
					"Tender"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Tender:Delete"
						]
					}
				],
				"parameters": [
					{
						"description": "The ID of the tender to delete.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/tenders/{id}/items": {
			"get": {
				"operationId": "GetTenderItems",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Partial_TenderItem_"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Retrieves detailed information about a specific tender by their ID.\nThis endpoint is protected by JWT authentication, requiring \"Tender:Get\" permission.",
				"tags": [
					"Tender"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Tender:Get"
						]
					}
				],
				"parameters": [
					{
						"description": "The unique identifier of the tender to retrieve.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"post": {
				"operationId": "AddTenderItem",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Partial_TenderItem_"
								}
							}
						}
					}
				},
				"description": "Adds a new item to an existing tender identified by its ID. This operation is secured with JWT and requires \"Tender:Get\" permission.\nUseful for modifying tender details dynamically during the tender process.",
				"tags": [
					"Tender"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Tender:Get"
						]
					}
				],
				"parameters": [
					{
						"description": "The unique identifier of the tender to which the item will be added.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "The properties required to create the new tender item.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateTenderItemProperties",
								"description": "The properties required to create the new tender item."
							}
						}
					}
				}
			}
		},
		"/tenders/{id}/items-copy/{targetTenderId}": {
			"put": {
				"operationId": "CopyTenderItem",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Copies an existing tender item to another tender. This endpoint is protected by JWT authentication,\nrequiring \"Tender:Update\" permission. It allows users to duplicate tender items efficiently between tenders.",
				"tags": [
					"Tender"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Tender:Update"
						]
					}
				],
				"parameters": [
					{
						"description": "The unique identifier of the tender containing the item to copy.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "The ID of the target tender where the item will be copied.",
						"in": "path",
						"name": "targetTenderId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/tenders/{id}/items/{itemId}": {
			"put": {
				"operationId": "UpdateTenderItem",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Partial_TenderItem-or-null_"
								}
							}
						}
					}
				},
				"description": "Updates a specific item within a tender by its item ID. This endpoint requires JWT authentication\nand is protected by \"Tender:Update\" permission, ensuring that only authorized modifications are allowed.",
				"tags": [
					"Tender"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Tender:Update"
						]
					}
				],
				"parameters": [
					{
						"description": "The unique identifier of the tender containing the item.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "The unique identifier of the item to update.",
						"in": "path",
						"name": "itemId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "A partial tender item object containing the fields to update.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Partial_TenderItem_",
								"description": "A partial tender item object containing the fields to update."
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "RemoveTenderItem",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Removes a specific item from a tender by its item ID. This operation requires JWT authentication\nand is secured with \"Tender:Update\" permission, designed to allow modifications only by authorized personnel.",
				"tags": [
					"Tender"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Tender:Update"
						]
					}
				],
				"parameters": [
					{
						"description": "The unique identifier of the tender from which the item will be removed.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "The unique identifier of the item to be removed.",
						"in": "path",
						"name": "itemId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/tenders/{id}/documents": {
			"get": {
				"operationId": "GetTenderDocuments",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Partial_Document_"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Retrieves detailed information about a specific tender documents by their ID.\nThis endpoint is protected by JWT authentication, requiring \"Tender:Get\" permission.",
				"tags": [
					"Tender"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Tender:Get"
						]
					}
				],
				"parameters": [
					{
						"description": "The unique identifier of the tender to retrieve.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"put": {
				"operationId": "UploadTenderDocuments",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"uploaded": {
											"type": "boolean"
										}
									},
									"required": [
										"uploaded"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Upload documents for the specified tender by their ID.\nThis endpoint is protected by JWT authentication, requiring \"Tender:Update\" permission.",
				"tags": [
					"Tender"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Tender:Update"
						]
					}
				],
				"parameters": [
					{
						"description": "The unique identifier of the tender.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "A partial document objects containing the data to update.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"items": {
									"$ref": "#/components/schemas/CreateDocumentProperties"
								},
								"type": "array",
								"description": "A partial document objects containing the data to update."
							}
						}
					}
				}
			}
		},
		"/tenders/{id}/documents/{documentId}": {
			"get": {
				"operationId": "GetTenderDocument",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Document_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Retrieves detailed information about a specific tender document by its document ID within a tender.\nThis endpoint is protected by JWT authentication, requiring \"Tender:Get\" permission.",
				"tags": [
					"Tender"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Tender:Get"
						]
					}
				],
				"parameters": [
					{
						"description": "The unique identifier of the tender.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "The unique identifier of the document to retrieve.",
						"in": "path",
						"name": "documentId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"delete": {
				"operationId": "RemoveTenderDocument",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Removes a specific document from a tender by its document ID.\nThis endpoint requires JWT authentication and is protected with the \"Tender:Update\" permission,\nensuring that only authorized users can delete documents.",
				"tags": [
					"Tender"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Tender:Update"
						]
					}
				],
				"parameters": [
					{
						"description": "The unique identifier of the tender from which the document will be removed.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "The unique identifier of the document to be removed.",
						"in": "path",
						"name": "documentId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/tenders/{id}/journeys": {
			"get": {
				"operationId": "GetTenderJourneys",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Partial_Journey_"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Retrieves journey information associated with a specific tender by its ID.\nThis endpoint is protected by JWT authentication, requiring \"Tender:Get\" permission.",
				"tags": [
					"Tender"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Tender:Get"
						]
					}
				],
				"parameters": [
					{
						"description": "The unique identifier of the tender.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/tenders/{id}/documents-by-type": {
			"delete": {
				"operationId": "RemoveAllTenderDocuments",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Deletes all documents of a specific type associated with a tender by its ID.\nThis endpoint is protected by JWT authentication, requiring \"Tender:Update\" permission.",
				"tags": [
					"Tender"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Tender:Update"
						]
					}
				],
				"parameters": [
					{
						"description": "The unique identifier of the tender.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "The type of documents to remove.",
						"in": "query",
						"name": "type",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				]
			}
		},
		"/tenants": {
			"get": {
				"operationId": "GetTenants",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Partial_Tenant_"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Retrieves a list of all tenants within the system. This endpoint requires\nauthentication and is protected by JWT tokens with the \"Tenant:List\" permission.",
				"tags": [
					"Tenant"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant:List"
						]
					}
				],
				"parameters": []
			},
			"post": {
				"operationId": "CreateTenant",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Tenant_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Creates a new tenant with the provided properties. This operation is secured and\nrequires a JWT token with \"Tenant:Create\" permission.",
				"tags": [
					"Tenant"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant:Create"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "The properties required to create a new tenant.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateTenantProperties",
								"description": "The properties required to create a new tenant."
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteTenants",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Deletes multiple tenants based on an array of their IDs. This operation is protected and\nrequires \"Tenant:Delete\" permission. It affects only the tenants associated with the\nauthenticated user's context.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant:Delete"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "An object containing an array of tenant IDs to delete.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"ids": {
										"items": {
											"type": "number",
											"format": "double"
										},
										"type": "array"
									}
								},
								"required": [
									"ids"
								],
								"type": "object",
								"description": "An object containing an array of tenant IDs to delete."
							}
						}
					}
				}
			}
		},
		"/tenants/{id}": {
			"get": {
				"operationId": "GetTenant",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Tenant_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Fetches detailed information about a specific tenant, identified by their unique ID. \nRequires authentication and \"Tenant:Get\" permission for access.",
				"tags": [
					"Tenant"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant:Get"
						]
					}
				],
				"parameters": [
					{
						"description": "The unique identifier of the tenant.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateTenant",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Tenant_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Updates the information of an existing tenant, identified by their ID. Access to this\nendpoint is restricted to authenticated requests with \"Tenant:Update\" permission.",
				"tags": [
					"Tenant"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant:Update"
						]
					}
				],
				"parameters": [
					{
						"description": "The unique identifier of the tenant to update.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "A partial tenant object containing the fields to update.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Partial_Tenant_",
								"description": "A partial tenant object containing the fields to update."
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteTenant",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Deletes a specific tenant identified by their ID. Access to this endpoint is restricted\nto requests authenticated with a JWT token having \"Tenant:Delete\" permission.",
				"tags": [
					"Tenant"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant:Delete"
						]
					}
				],
				"parameters": [
					{
						"description": "The unique identifier of the tenant to delete.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/tenants/{id}/logo": {
			"put": {
				"operationId": "UpdateLogo",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"uploaded": {
											"type": "boolean"
										}
									},
									"required": [
										"uploaded"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Uploads or updates a logo for a specific tenant.The endpoint requires authentication\nand the \"Tenant:Update\" permission.The logo is associated with the tenant based on their ID.",
				"tags": [
					"Tenant"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant:Update"
						]
					}
				],
				"parameters": [
					{
						"description": "The ID of the tenant to update the logo for.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "Contains the image data and metadata for the logo.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateDocumentProperties",
								"description": "Contains the image data and metadata for the logo."
							}
						}
					}
				}
			}
		},
		"/statistics/overview": {
			"get": {
				"operationId": "Get",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"invoiceNum": {
											"type": "number",
											"format": "double"
										},
										"tenderNum": {
											"type": "number",
											"format": "double"
										},
										"userNum": {
											"type": "number",
											"format": "double"
										}
									},
									"required": [
										"invoiceNum",
										"tenderNum",
										"userNum"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Retrieves the statistics of the API. This method is used for monitoring\nand tracking the usage of the API.",
				"tags": [
					"Statistics"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant:List"
						]
					}
				],
				"parameters": []
			}
		},
		"/search/global": {
			"put": {
				"operationId": "Search",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {}
							}
						}
					}
				},
				"description": "Retrieves a list of all tenants within the system. This endpoint requires\nauthentication and is protected by JWT tokens with the \"Tenant:List\" permission.",
				"tags": [
					"Search"
				],
				"security": [
					{
						"jwtToken": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"keyword": {
										"type": "string"
									}
								},
								"required": [
									"keyword"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/roles": {
			"get": {
				"operationId": "GetRoles",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Partial_Role_"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Retrieves a list of roles.\nThis method is secured with a JWT token and requires the \"Role:List\" permission.\nIt is intended to provide a list of all available roles in the system.",
				"tags": [
					"Role"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Permission:List"
						]
					}
				],
				"parameters": []
			}
		},
		"/roles/permissions": {
			"get": {
				"operationId": "GetPermissions",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Partial_Role_"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Retrieves a list of role permissions.\nThis method is secured with a JWT token and requires the \"Role:List\" permission.\nIt is intended to provide a list of all available role permissions in the system.",
				"tags": [
					"Role"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Permission:List"
						]
					}
				],
				"parameters": []
			},
			"put": {
				"operationId": "UpdatePermissions",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Partial_Role_"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Updates role permissions.\nThis method is secured with a JWT token and requires the \"Role:List\" permission.\nIt is intended to update the permissions of one or more roles in the system.",
				"tags": [
					"Role"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Permission:Update"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "An array of objects representing role permissions to be updated.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"items": {
									"$ref": "#/components/schemas/SetRolePermissionsProperties"
								},
								"type": "array",
								"description": "An array of objects representing role permissions to be updated."
							}
						}
					}
				}
			}
		},
		"/locations": {
			"get": {
				"operationId": "GetLocations",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Partial_Location_"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Retrieves a list of locations associated with the authenticated user's tenant.\nRequires a valid JWT token with \"Location:List\" permission. \n\nThis method returns a list of location objects, each containing partial information about a location.",
				"tags": [
					"Location"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Location:List"
						]
					}
				],
				"parameters": []
			},
			"post": {
				"operationId": "CreateLocation",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Location_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Creates a new location with the provided properties under the authenticated user's tenant. \nA valid JWT token with \"Location:Create\" permission is required.",
				"tags": [
					"Location"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Location:Create"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "The properties to create a new location.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateLocationProperties",
								"description": "The properties to create a new location."
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteLocations",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Deletes multiple locations based on the provided array of IDs. \nRequires a valid JWT token with \"Location:Delete\" permission.",
				"tags": [
					"Location"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Location:Delete"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "An object containing an array of location IDs to delete.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"ids": {
										"items": {
											"type": "number",
											"format": "double"
										},
										"type": "array"
									}
								},
								"required": [
									"ids"
								],
								"type": "object",
								"description": "An object containing an array of location IDs to delete."
							}
						}
					}
				}
			}
		},
		"/locations/{id}": {
			"get": {
				"operationId": "GetLocation",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Location_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Fetches detailed information about a specific location identified by its ID. \nRequires JWT authentication with \"Location:Get\" permission.",
				"tags": [
					"Location"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Location:Get"
						]
					}
				],
				"parameters": [
					{
						"description": "The unique identifier of the location to retrieve.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateLocation",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Location_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Updates an existing location identified by its ID with the provided properties. \nThis operation requires JWT authentication and \"Location:Update\" permission.",
				"tags": [
					"Location"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Location:Update"
						]
					}
				],
				"parameters": [
					{
						"description": "The unique identifier of the location to update.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "The properties to update in the location.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Partial_Location_",
								"description": "The properties to update in the location."
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteLocation",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Deletes a specific location identified by its ID. \nThis endpoint requires JWT authentication and \"Location:Delete\" permission.",
				"tags": [
					"Location"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Location:Delete"
						]
					}
				],
				"parameters": [
					{
						"description": "The ID of the location to delete.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/locations/{id}/add-to-company": {
			"post": {
				"operationId": "AddToCompany",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Associates a location with a company by adding the location to the company's list of locations. \nRequires a valid JWT token with \"Location:List\" permission.",
				"tags": [
					"Location"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Location:List"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "An object containing the ID of the location to add to a company.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"id": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"id"
								],
								"type": "object",
								"description": "An object containing the ID of the location to add to a company."
							}
						}
					}
				}
			}
		},
		"/locations/{id}/remove-from-company": {
			"delete": {
				"operationId": "RemoveFromCompany",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Remove a specified location associations from a company. \nRequires a valid JWT token with \"Location:List\" permission.",
				"tags": [
					"Location"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Location:List"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "An object containing the ID of the location to remove from a company.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"id": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"id"
								],
								"type": "object",
								"description": "An object containing the ID of the location to remove from a company."
							}
						}
					}
				}
			}
		},
		"/healthz": {
			"get": {
				"operationId": "Get",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"description": "Retrieves the API health status. This method is used for health checking\nand indicates if the API is running and responsive.\nA typical use case is in deployment environments for continuous monitoring\nand readiness checks.",
				"tags": [
					"Health"
				],
				"security": [],
				"parameters": []
			}
		},
		"/contacts": {
			"get": {
				"operationId": "GetContacts",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Partial_Contact_"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Retrieves a list of contacts for the authenticated user's tenant. \nThis endpoint requires a valid JWT token with \"Contact:List\" permission.",
				"tags": [
					"Contact"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Contact:List"
						]
					}
				],
				"parameters": []
			},
			"post": {
				"operationId": "CreateContact",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Contact_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Creates a new contact with the provided details. This operation requires\na valid JWT token with \"Contact:Create\" permission. The new contact is associated\nwith the authenticated user's tenant.",
				"tags": [
					"Contact"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Contact:Create"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "The properties for creating a new contact.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateContactProperties",
								"description": "The properties for creating a new contact."
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteContacts",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Deletes multiple contacts based on the provided array of IDs. This operation requires\nauthentication and \"Contact:Delete\" permission. The deletion affects only the contacts\nassociated with the authenticated user's tenant.",
				"tags": [
					"Contact"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Contact:Delete"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "An object containing an array of contact IDs to delete.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"ids": {
										"items": {
											"type": "number",
											"format": "double"
										},
										"type": "array"
									}
								},
								"required": [
									"ids"
								],
								"type": "object",
								"description": "An object containing an array of contact IDs to delete."
							}
						}
					}
				}
			}
		},
		"/contacts/{id}": {
			"get": {
				"operationId": "GetContact",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Contact_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Retrieves detailed information about a specific contact by their ID.\nThis endpoint is protected by JWT authentication, requiring \"Contact:Get\" permission.",
				"tags": [
					"Contact"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Contact:Get"
						]
					}
				],
				"parameters": [
					{
						"description": "The unique identifier of the contact to retrieve.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateContact",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Contact_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Updates an existing contact identified by their ID. This endpoint checks for valid JWT authentication \nand requires \"Contact:Update\" permission. Only the provided fields in the request body are updated.",
				"tags": [
					"Contact"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Contact:Update"
						]
					}
				],
				"parameters": [
					{
						"description": "The unique identifier of the contact to update.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "A partial contact object containing fields to update.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Partial_Contact_",
								"description": "A partial contact object containing fields to update."
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteContact",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Deletes a single contact identified by their ID. This endpoint is secured with JWT authentication\nand requires \"Contact:Delete\" permission. The operation is restricted to contacts within the\nauthenticated user's tenant.",
				"tags": [
					"Contact"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Contact:Delete"
						]
					}
				],
				"parameters": [
					{
						"description": "The ID of the contact to delete.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/contacts/{id}/add-to-company": {
			"post": {
				"operationId": "AddToCompany",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Associates a contact with a company by adding the contact to the company's list of contacts. \nRequires a valid JWT token with \"Contact:List\" permission.",
				"tags": [
					"Contact"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Contact:List"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "An object containing the ID of the contact to add to a company.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"id": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"id"
								],
								"type": "object",
								"description": "An object containing the ID of the contact to add to a company."
							}
						}
					}
				}
			}
		},
		"/contacts/{id}/remove-from-company": {
			"delete": {
				"operationId": "RemoveFromCompany",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Remove a specified contact associations from a company. \nRequires a valid JWT token with \"Contact:List\" permission.",
				"tags": [
					"Contact"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Contact:List"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "An object containing the ID of the contact to remove from a company.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"id": {
										"type": "number",
										"format": "double"
									}
								},
								"required": [
									"id"
								],
								"type": "object",
								"description": "An object containing the ID of the contact to remove from a company."
							}
						}
					}
				}
			}
		},
		"/companies": {
			"get": {
				"operationId": "GetCompanies",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Partial_Company_"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Retrieves a list of companies filtered by type. This endpoint is secured with JWT authentication and requires\nspecific permissions. It supports filtering companies by their type, either CONTRACTOR or CUSTOMER.\n\nAuthorization tokens and user permissions are validated before processing the request. The user's tenant information\nis utilized to fetch relevant company data.",
				"tags": [
					"Company"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Company:List"
						]
					}
				],
				"parameters": [
					{
						"description": "The type of companies to filter by. Accepts either 'CONTRACTOR' or 'CUSTOMER'.",
						"in": "query",
						"name": "type",
						"required": true,
						"schema": {}
					}
				]
			},
			"post": {
				"operationId": "CreateCompany",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Company_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Creates a new company with the provided details. This endpoint requires authentication and specific permissions.\nIt utilizes the user's tenant and ID from the JWT token for creating the company in the correct context.",
				"tags": [
					"Company"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Company:Create"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "The properties required to create a new company.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateCompanyProperties",
								"description": "The properties required to create a new company."
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteCompanies",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Deletes multiple companies based on their IDs. This is a secured endpoint that validates the user's authentication\nand permissions. The operation uses the user's tenant information for authorization.",
				"tags": [
					"Company"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Company:Delete"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "Contains the list of company IDs to delete.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"ids": {
										"items": {
											"type": "number",
											"format": "double"
										},
										"type": "array"
									}
								},
								"required": [
									"ids"
								],
								"type": "object",
								"description": "Contains the list of company IDs to delete."
							}
						}
					}
				}
			}
		},
		"/companies/{id}": {
			"get": {
				"operationId": "GetCompany",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Company_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Fetches detailed information about a specific company identified by its ID. This method ensures that only\nauthenticated users with appropriate permissions can access company details. The endpoint uses JWT for security.",
				"tags": [
					"Company"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Company:Get"
						]
					}
				],
				"parameters": [
					{
						"description": "The unique identifier of the company to retrieve.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateCompany",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Company_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"description": "Updates an existing company's details identified by its ID. This endpoint checks for valid authentication\nand the necessary permissions before allowing updates to proceed. The user's tenant and ID are used for\nauthorization and ensuring data consistency.",
				"tags": [
					"Company"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Company:Update"
						]
					}
				],
				"parameters": [
					{
						"description": "The ID of the company to update.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "The new details for the company. Partial updates are supported.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Partial_Company_",
								"description": "The new details for the company. Partial updates are supported."
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteCompany",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Deletes a single company identified by its ID. Like other endpoints, this operation requires authentication\nand appropriate permissions. The user's tenant information is critical for ensuring secure data manipulation.",
				"tags": [
					"Company"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Company:Delete"
						]
					}
				],
				"parameters": [
					{
						"description": "The ID of the company to delete.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/companies/{id}/document": {
			"post": {
				"operationId": "UpdateDocument",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"uploaded": {
											"type": "boolean"
										}
									},
									"required": [
										"uploaded"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Uploads or updates a company's logo. This action is protected and requires authentication and specific permissions.\nThe logo is linked to the company's profile based on the company ID.",
				"tags": [
					"Company"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant",
							"Company:Update"
						]
					}
				],
				"parameters": [
					{
						"description": "The company ID to associate the logo with.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "Contains the image data and metadata for the logo.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateDocumentProperties",
								"description": "Contains the image data and metadata for the logo."
							}
						}
					}
				}
			}
		},
		"/auth/login": {
			"post": {
				"operationId": "LogIn",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LoginResponse"
								}
							}
						}
					}
				},
				"description": "Authenticates a user and initiates a session. This endpoint is responsible for\nvalidating user credentials (like email and password) and, if successful,\nissuing authentication tokens.\n\nOn successful authentication, it sets the necessary cookies for maintaining\nthe user's session. These include a token and a refresh token, which are\nused for maintaining session state and refreshing the session, respectively.\n\nThe actual authentication logic is managed by the authentication service,\nwhile this method serves as an interface between the HTTP request and the\nservice layer.",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "The login request body containing the user's login credentials.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LoginRequest",
								"description": "The login request body containing the user's login credentials."
							}
						}
					}
				}
			}
		},
		"/auth/login/2fa": {
			"post": {
				"operationId": "LogIn2Fa",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LoginResponse"
								}
							}
						}
					}
				},
				"description": "Authenticates a user with two-factor authentication (2FA). This endpoint extends the basic login \nfunctionality by adding a second layer of security. After the initial credentials (like email and password) \nare validated, this method requires a second verification step, typically a code from a device or app.\n\nSimilar to the basic login, upon successful authentication, it sets up the necessary cookies. However,\nthe focus here is on securely managing the 2FA process, ensuring that both the primary credentials \nand the 2FA verification are successful before issuing tokens.\n\nThis method also serves as a bridge between the HTTP request and the authentication service, \nspecifically handling the 2FA logic. It forwards the context and the 2FA credentials (like a verification code)\nto the service layer for processing.",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "The 2FA request body, containing both the user's initial login credentials and the 2FA verification code.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Login2FaRequest",
								"description": "The 2FA request body, containing both the user's initial login credentials and the 2FA verification code."
							}
						}
					}
				}
			}
		},
		"/auth/verify-account": {
			"post": {
				"operationId": "VerifyAccount",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VerifyAccountResponse"
								}
							}
						}
					}
				},
				"description": "Processes user account verification requests. This endpoint is used to verify\na user's account typically after they have signed up. The verification is\nusually done using a token that is sent to the user's email.\n\nThe method takes a verification token as a query parameter and other relevant\ndata in the request body. It then interacts with the authentication service to\nvalidate the token and complete the verification process.",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": [
					{
						"description": "The verification token, usually passed as a query parameter.",
						"in": "query",
						"name": "v",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The request body containing any additional data needed for verification.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VerifyAccountRequest",
								"description": "The request body containing any additional data needed for verification."
							}
						}
					}
				}
			}
		},
		"/auth/refresh-token": {
			"get": {
				"operationId": "Refresh",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RefreshTokenResponse"
								}
							}
						}
					}
				},
				"description": "Refreshes the user's authentication tokens. This endpoint is used when the\ncurrent access token has expired, and a new access token is needed. The\nrefresh token, typically stored as a cookie, is used to safely generate a\nnew access token without requiring the user to log in again.\n\nUpon successful token refresh, new tokens are issued and set in the response\ncookies, ensuring continuous authenticated access for the user.",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": []
			}
		},
		"/auth/logout": {
			"get": {
				"operationId": "LogOut",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LogoutResponse"
								}
							}
						}
					}
				},
				"description": "Handles user logout by clearing the authentication cookies. This endpoint is\nresponsible for ending the user's session in a secure manner. It removes the\nsession tokens (access and refresh tokens) from the cookies, effectively\nlogging the user out of the application.\n\nThis method ensures that the session tokens are not only cleared from the\napplication's context but also from the client side by resetting the relevant\ncookies.",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": []
			}
		},
		"/auth/forgotten-password": {
			"post": {
				"operationId": "ForgottenPassword",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ForgottenPasswordResponse"
								}
							}
						}
					}
				},
				"description": "Handles forgotten password requests by initiating a password reset process.\nThis method is responsible for sending a password reset link or code to the\nuser's registered email address. It is an essential part of user account\nmanagement, especially in scenarios where a user has forgotten their password\nand needs to reset it.\n\nThe method accepts the user's email (or other identifying information) as part\nof the request body and passes this information to the authentication service\nto handle the sending of the reset link or code.",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "The request body containing the necessary data for processing\nforgotten password requests, such as the user's email.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ForgottenPasswordRequest",
								"description": "The request body containing the necessary data for processing\nforgotten password requests, such as the user's email."
							}
						}
					}
				}
			}
		},
		"/auth/reset-password": {
			"post": {
				"operationId": "ResetPassword",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResetPasswordResponse"
								}
							}
						}
					}
				},
				"description": "Manages the password reset process for users. This endpoint is invoked when a\nuser wants to reset their password, typically following a forgotten password\nscenario. It requires a unique token, usually sent to the user's email, along\nwith their new password.\n\nThe token ensures that the request is legitimate and is often passed as a query\nparameter. The method verifies the token's validity and, if successful, updates\nthe user's password with the new one provided in the request body.\n\nThis method is a key component in ensuring user account security, allowing users\nto regain access to their account securely after losing their password.",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": [
					{
						"description": "The verification token, typically provided as a query parameter,\nused to validate the password reset request.",
						"in": "query",
						"name": "v",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The request body, containing the new password and any additional\ndata required for the password reset.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ResetPasswordRequest",
								"description": "The request body, containing the new password and any additional\ndata required for the password reset."
							}
						}
					}
				}
			}
		},
		"/auth/me": {
			"get": {
				"operationId": "GetMe",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Partial_User_"
								}
							}
						}
					}
				},
				"description": "Retrieves the authenticated user's profile information. This endpoint is typically\ncalled after a user has logged in and received an authentication token. It's used\nto fetch the user's data such as name, email, and any other relevant profile information.\n\nThe method requires an authentication token, usually provided in the request headers,\nto verify the user's identity. Upon successful authentication, it returns the user's\nprofile data. This ensures that only authenticated users can access their own profile\ninformation, maintaining privacy and security.\n\nThis method is crucial for personalized user experiences, allowing the system to\nidentify and provide specific information relevant to the logged-in user.",
				"tags": [
					"Authentication"
				],
				"security": [
					{
						"jwtToken": []
					}
				],
				"parameters": []
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}