{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"AccountVerifyToken": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"userId": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"token": {
						"type": "string"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"deletedOn": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					}
				},
				"required": [
					"id",
					"token"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ForgottenPasswordToken": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"userId": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"token": {
						"type": "string"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"expiredOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"deletedOn": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					}
				},
				"required": [
					"id",
					"token"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ProfilePictureOwnerType": {
				"type": "string",
				"enum": [
					"user",
					"tenant",
					"contact",
					"company"
				],
				"nullable": true
			},
			"ProfilePicture": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"ownerId": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"ownerType": {
						"$ref": "#/components/schemas/ProfilePictureOwnerType"
					},
					"image": {
						"type": "string"
					},
					"mimeType": {
						"type": "string"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					}
				},
				"required": [
					"image",
					"mimeType"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TwoFactorSession": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"userId": {
						"type": "number",
						"format": "double"
					},
					"token": {
						"type": "string"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					}
				},
				"required": [
					"id",
					"userId",
					"token"
				],
				"type": "object",
				"additionalProperties": false
			},
			"GeneratedSecret": {
				"properties": {
					"ascii": {
						"type": "string",
						"description": "ASCII representation of the secret"
					},
					"hex": {
						"type": "string",
						"description": "Hex representation of the secret"
					},
					"base32": {
						"type": "string",
						"description": "Base32 representation of the secret"
					},
					"qr_code_ascii": {
						"type": "string",
						"description": "URL for the QR code for the ASCII secret.",
						"deprecated": true
					},
					"qr_code_hex": {
						"type": "string",
						"description": "URL for the QR code for the hex secret.",
						"deprecated": true
					},
					"qr_code_base32": {
						"type": "string",
						"description": "URL for the QR code for the base32 secret.",
						"deprecated": true
					},
					"google_auth_qr": {
						"type": "string",
						"description": "URL for the Google Authenticator otpauth\nURL's QR code.",
						"deprecated": true
					},
					"otpauth_url": {
						"type": "string",
						"description": "Google Authenticator-compatible otpauth URL."
					}
				},
				"required": [
					"ascii",
					"hex",
					"base32",
					"google_auth_qr"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Record_string.never_": {
				"properties": {},
				"type": "object",
				"description": "Construct a type with a set of properties K of type T"
			},
			"TwoFactorAuthentication": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"userId": {
						"type": "number",
						"format": "double"
					},
					"secret": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/GeneratedSecret"
							},
							{
								"$ref": "#/components/schemas/Record_string.never_"
							}
						],
						"nullable": true
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					}
				},
				"required": [
					"id",
					"userId",
					"secret"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Permission": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"updatedBy": {
						"type": "number",
						"format": "double",
						"nullable": true
					}
				},
				"required": [
					"id",
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TENANT_STATUS.ACTIVE": {
				"enum": [
					"active"
				],
				"type": "string"
			},
			"TENANT_STATUS.INACTIVE": {
				"enum": [
					"inactive"
				],
				"type": "string"
			},
			"Tenant": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"country": {
						"type": "string"
					},
					"region": {
						"type": "string",
						"nullable": true
					},
					"city": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"zipCode": {
						"type": "string"
					},
					"status": {
						"anyOf": [
							{
								"$ref": "#/components/schemas/TENANT_STATUS.ACTIVE"
							},
							{
								"$ref": "#/components/schemas/TENANT_STATUS.INACTIVE"
							}
						]
					},
					"taxNumber": {
						"type": "string"
					},
					"registrationNumber": {
						"type": "string"
					},
					"bankAccount": {
						"type": "string",
						"nullable": true
					},
					"logo": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ProfilePicture"
							}
						],
						"nullable": true
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"updatedBy": {
						"type": "number",
						"format": "double",
						"nullable": true
					}
				},
				"required": [
					"id",
					"name",
					"email",
					"country",
					"city",
					"address",
					"zipCode",
					"status",
					"taxNumber",
					"registrationNumber"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Role": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"permissions": {
						"items": {
							"$ref": "#/components/schemas/Permission"
						},
						"type": "array"
					},
					"tenant": {
						"$ref": "#/components/schemas/Tenant"
					},
					"tenantId": {
						"type": "number",
						"format": "double",
						"nullable": true
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time",
						"nullable": true
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"updatedBy": {
						"type": "number",
						"format": "double",
						"nullable": true
					}
				},
				"required": [
					"id",
					"name"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Partial_User_": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"email": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"phoneNumber": {
						"type": "string"
					},
					"salt": {
						"type": "string"
					},
					"status": {
						"type": "string",
						"enum": [
							"active",
							"inactive",
							"disabled",
							"pending"
						]
					},
					"enableTwoFactor": {
						"type": "boolean"
					},
					"country": {
						"type": "string"
					},
					"region": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"zipCode": {
						"type": "string"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time"
					},
					"deletedOn": {
						"type": "string",
						"format": "date-time"
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"updatedBy": {
						"type": "number",
						"format": "double"
					},
					"deletedBy": {
						"type": "number",
						"format": "double"
					},
					"accountVerifyToken": {
						"$ref": "#/components/schemas/AccountVerifyToken"
					},
					"accountVerifyTokenId": {
						"type": "number",
						"format": "double"
					},
					"forgottenPasswordToken": {
						"$ref": "#/components/schemas/ForgottenPasswordToken"
					},
					"forgottenPasswordTokenId": {
						"type": "number",
						"format": "double"
					},
					"profilePicture": {
						"$ref": "#/components/schemas/ProfilePicture"
					},
					"profilePictureId": {
						"type": "number",
						"format": "double"
					},
					"twoFactorSession": {
						"$ref": "#/components/schemas/TwoFactorSession"
					},
					"twoFactorSessionId": {
						"type": "number",
						"format": "double"
					},
					"twoFactorAuthentication": {
						"$ref": "#/components/schemas/TwoFactorAuthentication"
					},
					"twoFactorAuthenticationId": {
						"type": "number",
						"format": "double"
					},
					"role": {
						"$ref": "#/components/schemas/Role"
					},
					"roleId": {
						"type": "number",
						"format": "double"
					},
					"tenant": {
						"$ref": "#/components/schemas/Tenant"
					},
					"tenantId": {
						"type": "number",
						"format": "double"
					},
					"lastLoggedIn": {
						"type": "string",
						"format": "date-time"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Pick_User.Exclude_keyofUser.id-or-createdOn-or-createdBy-or-updatedBy-or-updatedOn-or-deletedOn-or-deletedBy-or-accountVerifyToken-or-forgottenPasswordToken__": {
				"properties": {
					"email": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"phoneNumber": {
						"type": "string"
					},
					"salt": {
						"type": "string"
					},
					"status": {
						"type": "string",
						"enum": [
							"active",
							"inactive",
							"disabled",
							"pending"
						]
					},
					"enableTwoFactor": {
						"type": "boolean"
					},
					"country": {
						"type": "string"
					},
					"region": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"zipCode": {
						"type": "string"
					},
					"accountVerifyTokenId": {
						"type": "number",
						"format": "double"
					},
					"forgottenPasswordTokenId": {
						"type": "number",
						"format": "double"
					},
					"profilePicture": {
						"$ref": "#/components/schemas/ProfilePicture"
					},
					"profilePictureId": {
						"type": "number",
						"format": "double"
					},
					"twoFactorSession": {
						"$ref": "#/components/schemas/TwoFactorSession"
					},
					"twoFactorSessionId": {
						"type": "number",
						"format": "double"
					},
					"twoFactorAuthentication": {
						"$ref": "#/components/schemas/TwoFactorAuthentication"
					},
					"twoFactorAuthenticationId": {
						"type": "number",
						"format": "double"
					},
					"role": {
						"$ref": "#/components/schemas/Role"
					},
					"roleId": {
						"type": "number",
						"format": "double"
					},
					"tenant": {
						"$ref": "#/components/schemas/Tenant"
					},
					"tenantId": {
						"type": "number",
						"format": "double"
					},
					"lastLoggedIn": {
						"type": "string",
						"format": "date-time"
					}
				},
				"required": [
					"email",
					"name",
					"phoneNumber"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_User.id-or-createdOn-or-createdBy-or-updatedBy-or-updatedOn-or-deletedOn-or-deletedBy-or-accountVerifyToken-or-forgottenPasswordToken_": {
				"$ref": "#/components/schemas/Pick_User.Exclude_keyofUser.id-or-createdOn-or-createdBy-or-updatedBy-or-updatedOn-or-deletedOn-or-deletedBy-or-accountVerifyToken-or-forgottenPasswordToken__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CreateUserProperties": {
				"$ref": "#/components/schemas/Omit_User.id-or-createdOn-or-createdBy-or-updatedBy-or-updatedOn-or-deletedOn-or-deletedBy-or-accountVerifyToken-or-forgottenPasswordToken_"
			},
			"Pick_User.Exclude_keyofUser.id-or-createdOn-or-createdBy-or-updatedBy-or-updatedOn-or-deletedOn-or-deletedBy-or-email-or-password-or-accountVerifyToken-or-forgottenPasswordToken-or-lastLoggedIn__": {
				"properties": {
					"name": {
						"type": "string"
					},
					"phoneNumber": {
						"type": "string"
					},
					"salt": {
						"type": "string"
					},
					"status": {
						"type": "string",
						"enum": [
							"active",
							"inactive",
							"disabled",
							"pending"
						]
					},
					"enableTwoFactor": {
						"type": "boolean"
					},
					"country": {
						"type": "string"
					},
					"region": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"zipCode": {
						"type": "string"
					},
					"accountVerifyTokenId": {
						"type": "number",
						"format": "double"
					},
					"forgottenPasswordTokenId": {
						"type": "number",
						"format": "double"
					},
					"profilePicture": {
						"$ref": "#/components/schemas/ProfilePicture"
					},
					"profilePictureId": {
						"type": "number",
						"format": "double"
					},
					"twoFactorSession": {
						"$ref": "#/components/schemas/TwoFactorSession"
					},
					"twoFactorSessionId": {
						"type": "number",
						"format": "double"
					},
					"twoFactorAuthentication": {
						"$ref": "#/components/schemas/TwoFactorAuthentication"
					},
					"twoFactorAuthenticationId": {
						"type": "number",
						"format": "double"
					},
					"role": {
						"$ref": "#/components/schemas/Role"
					},
					"roleId": {
						"type": "number",
						"format": "double"
					},
					"tenant": {
						"$ref": "#/components/schemas/Tenant"
					},
					"tenantId": {
						"type": "number",
						"format": "double"
					}
				},
				"required": [
					"name",
					"phoneNumber"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_User.id-or-createdOn-or-createdBy-or-updatedBy-or-updatedOn-or-deletedOn-or-deletedBy-or-email-or-password-or-accountVerifyToken-or-forgottenPasswordToken-or-lastLoggedIn_": {
				"$ref": "#/components/schemas/Pick_User.Exclude_keyofUser.id-or-createdOn-or-createdBy-or-updatedBy-or-updatedOn-or-deletedOn-or-deletedBy-or-email-or-password-or-accountVerifyToken-or-forgottenPasswordToken-or-lastLoggedIn__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"UpdateUserProperties": {
				"$ref": "#/components/schemas/Omit_User.id-or-createdOn-or-createdBy-or-updatedBy-or-updatedOn-or-deletedOn-or-deletedBy-or-email-or-password-or-accountVerifyToken-or-forgottenPasswordToken-or-lastLoggedIn_"
			},
			"Pick_ProfilePicture.Exclude_keyofProfilePicture.id-or-createdOn-or-updatedOn__": {
				"properties": {
					"ownerId": {
						"type": "number",
						"format": "double"
					},
					"ownerType": {
						"$ref": "#/components/schemas/ProfilePictureOwnerType"
					},
					"image": {
						"type": "string"
					},
					"mimeType": {
						"type": "string"
					}
				},
				"required": [
					"image",
					"mimeType"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_ProfilePicture.id-or-createdOn-or-updatedOn_": {
				"$ref": "#/components/schemas/Pick_ProfilePicture.Exclude_keyofProfilePicture.id-or-createdOn-or-updatedOn__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CreateProfilePictureProperties": {
				"$ref": "#/components/schemas/Omit_ProfilePicture.id-or-createdOn-or-updatedOn_"
			},
			"UpdatePasswordProperties": {
				"properties": {
					"password": {
						"type": "string"
					},
					"newPassword": {
						"type": "string"
					}
				},
				"required": [
					"password",
					"newPassword"
				],
				"type": "object",
				"additionalProperties": false
			},
			"TENANT_STATUS": {
				"enum": [
					"active",
					"inactive"
				],
				"type": "string"
			},
			"Partial_Tenant_": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"country": {
						"type": "string"
					},
					"region": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"zipCode": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/TENANT_STATUS"
					},
					"taxNumber": {
						"type": "string"
					},
					"registrationNumber": {
						"type": "string"
					},
					"bankAccount": {
						"type": "string"
					},
					"logo": {
						"$ref": "#/components/schemas/ProfilePicture"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time"
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"updatedBy": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Pick_Tenant.Exclude_keyofTenant.id-or-createdOn-or-createdBy-or-updatedBy-or-updatedOn__": {
				"properties": {
					"email": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/TENANT_STATUS"
					},
					"country": {
						"type": "string"
					},
					"region": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"zipCode": {
						"type": "string"
					},
					"taxNumber": {
						"type": "string"
					},
					"registrationNumber": {
						"type": "string"
					},
					"bankAccount": {
						"type": "string"
					},
					"logo": {
						"$ref": "#/components/schemas/ProfilePicture"
					}
				},
				"required": [
					"email",
					"name",
					"status",
					"country",
					"city",
					"address",
					"zipCode",
					"taxNumber",
					"registrationNumber"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Tenant.id-or-createdOn-or-createdBy-or-updatedBy-or-updatedOn_": {
				"$ref": "#/components/schemas/Pick_Tenant.Exclude_keyofTenant.id-or-createdOn-or-createdBy-or-updatedBy-or-updatedOn__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CreateTenantProperties": {
				"$ref": "#/components/schemas/Omit_Tenant.id-or-createdOn-or-createdBy-or-updatedBy-or-updatedOn_"
			},
			"Partial_Role_": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"permissions": {
						"items": {
							"$ref": "#/components/schemas/Permission"
						},
						"type": "array"
					},
					"tenant": {
						"$ref": "#/components/schemas/Tenant"
					},
					"tenantId": {
						"type": "number",
						"format": "double"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time"
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"updatedBy": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"SetRolePermissionsProperties": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"permissions": {
						"items": {
							"properties": {
								"id": {
									"type": "number",
									"format": "double"
								}
							},
							"required": [
								"id"
							],
							"type": "object"
						},
						"type": "array"
					}
				},
				"required": [
					"id",
					"permissions"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LOCATION_STATUS": {
				"enum": [
					"active",
					"inactive"
				],
				"type": "string"
			},
			"Partial_Location_": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"country": {
						"type": "string"
					},
					"region": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"zipCode": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/LOCATION_STATUS"
					},
					"notes": {
						"type": "string"
					},
					"tenantId": {
						"type": "number",
						"format": "double"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time"
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"updatedBy": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Pick_Location.Exclude_keyofLocation.id-or-createdAt-or-createdOn-or-updatedBy-or-updatedOn__": {
				"properties": {
					"name": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/LOCATION_STATUS"
					},
					"country": {
						"type": "string"
					},
					"region": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"zipCode": {
						"type": "string"
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"tenantId": {
						"type": "number",
						"format": "double"
					},
					"notes": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"status",
					"country",
					"city",
					"address",
					"zipCode"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Location.id-or-createdAt-or-createdOn-or-updatedBy-or-updatedOn_": {
				"$ref": "#/components/schemas/Pick_Location.Exclude_keyofLocation.id-or-createdAt-or-createdOn-or-updatedBy-or-updatedOn__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CreateLocationProperties": {
				"$ref": "#/components/schemas/Omit_Location.id-or-createdAt-or-createdOn-or-updatedBy-or-updatedOn_"
			},
			"CONTACT_STATUS": {
				"enum": [
					"active",
					"inactive"
				],
				"type": "string"
			},
			"Partial_Contact_": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"phoneNumber": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/CONTACT_STATUS"
					},
					"notes": {
						"type": "string"
					},
					"tenantId": {
						"type": "number",
						"format": "double"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time"
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"updatedBy": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"Pick_Contact.Exclude_keyofContact.id-or-createdAt-or-createdOn-or-updatedBy-or-updatedOn__": {
				"properties": {
					"email": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"phoneNumber": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/CONTACT_STATUS"
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"tenantId": {
						"type": "number",
						"format": "double"
					},
					"notes": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"status"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Contact.id-or-createdAt-or-createdOn-or-updatedBy-or-updatedOn_": {
				"$ref": "#/components/schemas/Pick_Contact.Exclude_keyofContact.id-or-createdAt-or-createdOn-or-updatedBy-or-updatedOn__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CreateContactProperties": {
				"$ref": "#/components/schemas/Omit_Contact.id-or-createdAt-or-createdOn-or-updatedBy-or-updatedOn_"
			},
			"COMPANY_STATUS": {
				"enum": [
					"active",
					"inactive"
				],
				"type": "string"
			},
			"COMPANY_TYPE": {
				"enum": [
					"customer",
					"contractor"
				],
				"type": "string"
			},
			"Partial_Company_": {
				"properties": {
					"id": {
						"type": "number",
						"format": "double"
					},
					"name": {
						"type": "string"
					},
					"email": {
						"type": "string"
					},
					"country": {
						"type": "string"
					},
					"region": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"zipCode": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/COMPANY_STATUS"
					},
					"type": {
						"$ref": "#/components/schemas/COMPANY_TYPE"
					},
					"default": {
						"type": "boolean"
					},
					"taxNumber": {
						"type": "string"
					},
					"registrationNumber": {
						"type": "string"
					},
					"bankAccount": {
						"type": "string"
					},
					"prefix": {
						"type": "string"
					},
					"logo": {
						"$ref": "#/components/schemas/ProfilePicture"
					},
					"tenantId": {
						"type": "number",
						"format": "double"
					},
					"notes": {
						"type": "string"
					},
					"createdOn": {
						"type": "string",
						"format": "date-time"
					},
					"updatedOn": {
						"type": "string",
						"format": "date-time"
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"updatedBy": {
						"type": "number",
						"format": "double"
					}
				},
				"type": "object",
				"description": "Make all properties in T optional"
			},
			"COMPANY_TYPE.CONTRACTOR": {
				"enum": [
					"contractor"
				],
				"type": "string"
			},
			"COMPANY_TYPE.CUSTOMER": {
				"enum": [
					"customer"
				],
				"type": "string"
			},
			"Pick_Company.Exclude_keyofCompany.id-or-createdOn-or-updatedBy-or-updatedOn__": {
				"properties": {
					"email": {
						"type": "string"
					},
					"name": {
						"type": "string"
					},
					"status": {
						"$ref": "#/components/schemas/COMPANY_STATUS"
					},
					"country": {
						"type": "string"
					},
					"region": {
						"type": "string"
					},
					"city": {
						"type": "string"
					},
					"address": {
						"type": "string"
					},
					"zipCode": {
						"type": "string"
					},
					"createdBy": {
						"type": "number",
						"format": "double"
					},
					"tenantId": {
						"type": "number",
						"format": "double"
					},
					"taxNumber": {
						"type": "string"
					},
					"registrationNumber": {
						"type": "string"
					},
					"bankAccount": {
						"type": "string"
					},
					"logo": {
						"$ref": "#/components/schemas/ProfilePicture"
					},
					"notes": {
						"type": "string"
					},
					"type": {
						"$ref": "#/components/schemas/COMPANY_TYPE"
					},
					"default": {
						"type": "boolean"
					},
					"prefix": {
						"type": "string"
					}
				},
				"required": [
					"name",
					"status",
					"country",
					"city",
					"address",
					"zipCode",
					"type"
				],
				"type": "object",
				"description": "From T, pick a set of properties whose keys are in the union K"
			},
			"Omit_Company.id-or-createdOn-or-updatedBy-or-updatedOn_": {
				"$ref": "#/components/schemas/Pick_Company.Exclude_keyofCompany.id-or-createdOn-or-updatedBy-or-updatedOn__",
				"description": "Construct a type with the properties of T except for those in type K."
			},
			"CreateCompanyProperties": {
				"$ref": "#/components/schemas/Omit_Company.id-or-createdOn-or-updatedBy-or-updatedOn_"
			},
			"LoginResponse": {
				"properties": {
					"accessToken": {
						"type": "string"
					},
					"refreshToken": {
						"type": "string"
					},
					"twoFactorAuthenticationEnabled": {
						"type": "boolean"
					},
					"session": {
						"type": "string"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"LoginRequest": {
				"properties": {
					"email": {
						"type": "string",
						"pattern": "^(.+)@(.+)$"
					},
					"password": {
						"type": "string",
						"minLength": 1
					}
				},
				"required": [
					"email",
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"Login2FaRequest": {
				"properties": {
					"token": {
						"type": "string"
					},
					"session": {
						"type": "string"
					}
				},
				"required": [
					"token",
					"session"
				],
				"type": "object",
				"additionalProperties": false
			},
			"VerifyAccountResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"VerifyAccountRequest": {
				"properties": {
					"password": {
						"type": "string",
						"minLength": 1
					}
				},
				"required": [
					"password"
				],
				"type": "object",
				"additionalProperties": false
			},
			"RefreshTokenResponse": {
				"properties": {
					"accessToken": {
						"type": "string"
					}
				},
				"required": [
					"accessToken"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LogoutResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ForgottenPasswordResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ForgottenPasswordRequest": {
				"properties": {
					"email": {
						"type": "string",
						"pattern": "^(.+)@(.+)$"
					}
				},
				"required": [
					"email"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResetPasswordResponse": {
				"properties": {
					"success": {
						"type": "boolean"
					}
				},
				"required": [
					"success"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResetPasswordRequest": {
				"properties": {
					"password": {
						"type": "string",
						"minLength": 1
					}
				},
				"required": [
					"password"
				],
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"bearerAuth": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	},
	"info": {
		"title": "tsoa-ts-sequalize-boilerplate api",
		"version": "1.0.0",
		"license": {
			"name": "UNLICENSED"
		},
		"contact": {}
	},
	"paths": {
		"/version": {
			"get": {
				"operationId": "Get",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "string"
								}
							}
						}
					}
				},
				"description": "Retrieves the current version of the application or service.\nThis endpoint is typically used for health checks or monitoring the version of the deployed application.",
				"tags": [
					"Version"
				],
				"security": [],
				"parameters": []
			}
		},
		"/users": {
			"get": {
				"operationId": "GetUsers",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Partial_User_"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Retrieves a list of users.\nSecured with JWT token and requires \"User:List\" permission.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwtToken": [
							"User:List",
							"Tenant"
						]
					}
				],
				"parameters": []
			},
			"post": {
				"operationId": "CreateUser",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Partial_User_"
								}
							}
						}
					}
				},
				"description": "Creates a new user.\nSecured with JWT token and requires \"User:Create\" permission.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwtToken": [
							"User:Create",
							"Tenant"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "Properties required to create a user.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateUserProperties",
								"description": "Properties required to create a user."
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteUsers",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Deletes multiple users by their IDs.\nSecured with JWT token and requires \"User:Delete\" permission.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwtToken": [
							"User:Delete",
							"Tenant"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "An object containing an array of user IDs to delete.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"ids": {
										"items": {
											"type": "number",
											"format": "double"
										},
										"type": "array"
									}
								},
								"required": [
									"ids"
								],
								"type": "object",
								"description": "An object containing an array of user IDs to delete."
							}
						}
					}
				}
			}
		},
		"/users/{id}": {
			"put": {
				"operationId": "UpdateUser",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Partial_User_"
								}
							}
						}
					}
				},
				"description": "Updates an existing user.\nSecured with JWT token and requires \"User:Update\" permission.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwtToken": [
							"User:Update",
							"Me:*",
							"Tenant"
						]
					}
				],
				"parameters": [
					{
						"description": "The ID of the user to update.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "Properties to update in the user.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateUserProperties",
								"description": "Properties to update in the user."
							}
						}
					}
				}
			},
			"get": {
				"operationId": "GetUser",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Partial_User_"
								}
							}
						}
					}
				},
				"description": "Retrieves a single user by ID.\nSecured with JWT token and requires \"User:Get\" permission.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwtToken": [
							"User:Get",
							"Me:*",
							"Tenant"
						]
					}
				],
				"parameters": [
					{
						"description": "The ID of the user to retrieve.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Deletes a user by ID.\nSecured with JWT token and requires \"User:Delete\" permission.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwtToken": [
							"User:Delete",
							"Me:*",
							"Tenant"
						]
					}
				],
				"parameters": [
					{
						"description": "The ID of the user to delete.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/users/{id}/profile-picture": {
			"put": {
				"operationId": "UpdateUserProfilePicture",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"uploaded": {
											"type": "boolean"
										}
									},
									"required": [
										"uploaded"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Updates the profile picture of a user by ID.\nSecured with JWT token and requires \"User:Update\" or \"Me:*\" permission.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwtToken": [
							"User:Update",
							"Me:*",
							"Tenant"
						]
					}
				],
				"parameters": [
					{
						"description": "The ID of the user to update the profile picture.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "The properties to update the profile picture.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateProfilePictureProperties",
								"description": "The properties to update the profile picture."
							}
						}
					}
				}
			}
		},
		"/users/{id}/new-password": {
			"put": {
				"operationId": "UpdateUserPassword",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Updates the password of a user by ID.\nSecured with JWT token and requires \"User:Update\" or \"Me:*\" permission.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwtToken": [
							"User:Update",
							"Me:*",
							"Tenant"
						]
					}
				],
				"parameters": [
					{
						"description": "The ID of the user to update the password.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"description": "The new password properties.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdatePasswordProperties",
								"description": "The new password properties."
							}
						}
					}
				}
			}
		},
		"/users/{id}/resend-verification-email": {
			"put": {
				"operationId": "ResendVerificationEmail",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Resends the verification email for a user by ID.\nSecured with JWT token and requires \"User:Update\" permission.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwtToken": [
							"User:Update",
							"Tenant"
						]
					}
				],
				"parameters": [
					{
						"description": "The ID of the user to resend the verification email.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/users/{id}/two-factor-authentication": {
			"post": {
				"operationId": "GenerateTwoFactorAuthenticationConfig",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"qrCode": {
											"type": "string"
										},
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"qrCode",
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"description": "Sets up two-factor authentication for a user by ID.\nSecured with JWT token and requires \"User:Update\" or \"Me:*\" permission.",
				"tags": [
					"User"
				],
				"security": [
					{
						"jwtToken": [
							"User:Update",
							"Me:*",
							"Tenant"
						]
					}
				],
				"parameters": [
					{
						"description": "The ID of the user to set up two-factor authentication.",
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"put": {
				"operationId": "EnableTwoFactorAuthentication",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"User"
				],
				"security": [
					{
						"jwtToken": [
							"User:Update",
							"Me:*",
							"Tenant"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"code": {
										"type": "string"
									}
								},
								"required": [
									"code"
								],
								"type": "object"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DisableTwoFactorAuthentication",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"User"
				],
				"security": [
					{
						"jwtToken": [
							"User:Update",
							"Me:*",
							"Tenant"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/tenants": {
			"get": {
				"operationId": "GetTenants",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Partial_Tenant_"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"Tenant"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant:List"
						]
					}
				],
				"parameters": []
			},
			"post": {
				"operationId": "CreateTenant",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Tenant_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"tags": [
					"Tenant"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant:Create"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateTenantProperties"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteTenants",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"User"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant:Delete"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"ids": {
										"items": {
											"type": "number",
											"format": "double"
										},
										"type": "array"
									}
								},
								"required": [
									"ids"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/tenants/{id}": {
			"get": {
				"operationId": "GetTenant",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Tenant_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"tags": [
					"Tenant"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant:Get"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateTenant",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Tenant_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"tags": [
					"Tenant"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant:Update"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Partial_Tenant_"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteTenant",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Tenant"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant:Delete"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/tenants/{id}/logo": {
			"put": {
				"operationId": "UpdateLogo",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"uploaded": {
											"type": "boolean"
										}
									},
									"required": [
										"uploaded"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Tenant"
				],
				"security": [
					{
						"jwtToken": [
							"Tenant:Update"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateProfilePictureProperties"
							}
						}
					}
				}
			}
		},
		"/roles": {
			"get": {
				"operationId": "GetRoles",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Partial_Role_"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Retrieves a list of roles.\nThis method is secured with a JWT token and requires the \"Role:List\" permission.\nIt is intended to provide a list of all available roles in the system.",
				"tags": [
					"Role"
				],
				"security": [
					{
						"jwtToken": [
							"Permission:List",
							"Tenant"
						]
					}
				],
				"parameters": []
			}
		},
		"/roles/permissions": {
			"get": {
				"operationId": "GetPermissions",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Partial_Role_"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Retrieves a list of role permissions.\nThis method is secured with a JWT token and requires the \"Role:List\" permission.\nIt is intended to provide a list of all available role permissions in the system.",
				"tags": [
					"Role"
				],
				"security": [
					{
						"jwtToken": [
							"Permission:List",
							"Tenant"
						]
					}
				],
				"parameters": []
			},
			"put": {
				"operationId": "UpdatePermissions",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Partial_Role_"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"description": "Updates role permissions.\nThis method is secured with a JWT token and requires the \"Role:List\" permission.\nIt is intended to update the permissions of one or more roles in the system.",
				"tags": [
					"Role"
				],
				"security": [
					{
						"jwtToken": [
							"Permission:Update",
							"Tenant"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"description": "An array of objects representing role permissions to be updated.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"items": {
									"$ref": "#/components/schemas/SetRolePermissionsProperties"
								},
								"type": "array",
								"description": "An array of objects representing role permissions to be updated."
							}
						}
					}
				}
			}
		},
		"/locations": {
			"get": {
				"operationId": "GetLocations",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Partial_Location_"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"Location"
				],
				"security": [
					{
						"jwtToken": [
							"Location:List"
						]
					}
				],
				"parameters": []
			},
			"post": {
				"operationId": "CreateLocation",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Location_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"tags": [
					"Location"
				],
				"security": [
					{
						"jwtToken": [
							"Location:Create"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateLocationProperties"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteLocations",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Location"
				],
				"security": [
					{
						"jwtToken": [
							"Location:Delete"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"ids": {
										"items": {
											"type": "number",
											"format": "double"
										},
										"type": "array"
									}
								},
								"required": [
									"ids"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/locations/{id}": {
			"get": {
				"operationId": "GetLocation",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Location_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"tags": [
					"Location"
				],
				"security": [
					{
						"jwtToken": [
							"Location:Get"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateLocation",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Location_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"tags": [
					"Location"
				],
				"security": [
					{
						"jwtToken": [
							"Location:Update"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Partial_Location_"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteLocation",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Location"
				],
				"security": [
					{
						"jwtToken": [
							"Location:Delete"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/healthz": {
			"get": {
				"operationId": "Get",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"type": "boolean"
								}
							}
						}
					}
				},
				"description": "Retrieves the API health status. This method is used for health checking\nand indicates if the API is running and responsive.\nA typical use case is in deployment environments for continuous monitoring\nand readiness checks.",
				"tags": [
					"Health"
				],
				"security": [],
				"parameters": []
			}
		},
		"/contacts": {
			"get": {
				"operationId": "GetContacts",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Partial_Contact_"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"Contact"
				],
				"security": [
					{
						"jwtToken": [
							"Contact:List"
						]
					}
				],
				"parameters": []
			},
			"post": {
				"operationId": "CreateContact",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Contact_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"tags": [
					"Contact"
				],
				"security": [
					{
						"jwtToken": [
							"Contact:Create"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateContactProperties"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteContacts",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Contact"
				],
				"security": [
					{
						"jwtToken": [
							"Contact:Delete"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"ids": {
										"items": {
											"type": "number",
											"format": "double"
										},
										"type": "array"
									}
								},
								"required": [
									"ids"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/contacts/{id}": {
			"get": {
				"operationId": "GetContact",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Contact_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"tags": [
					"Contact"
				],
				"security": [
					{
						"jwtToken": [
							"Contact:Get"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateContact",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Contact_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"tags": [
					"Contact"
				],
				"security": [
					{
						"jwtToken": [
							"Contact:Update"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Partial_Contact_"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteContact",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Contact"
				],
				"security": [
					{
						"jwtToken": [
							"Contact:Delete"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/contacts/{id}/logo": {
			"put": {
				"operationId": "UpdateLogo",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"uploaded": {
											"type": "boolean"
										}
									},
									"required": [
										"uploaded"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Contact"
				],
				"security": [
					{
						"jwtToken": [
							"Contact:Update"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateProfilePictureProperties"
							}
						}
					}
				}
			}
		},
		"/companies": {
			"get": {
				"operationId": "GetCompanies",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"items": {
										"$ref": "#/components/schemas/Partial_Company_"
									},
									"type": "array"
								}
							}
						}
					}
				},
				"tags": [
					"Company"
				],
				"security": [
					{
						"jwtToken": [
							"Company:List"
						]
					}
				],
				"parameters": [
					{
						"in": "query",
						"name": "type",
						"required": true,
						"schema": {}
					}
				]
			},
			"post": {
				"operationId": "CreateCompany",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Company_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"tags": [
					"Company"
				],
				"security": [
					{
						"jwtToken": [
							"Company:Create"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateCompanyProperties"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteCompanies",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Company"
				],
				"security": [
					{
						"jwtToken": [
							"Company:Delete"
						]
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"properties": {
									"ids": {
										"items": {
											"type": "number",
											"format": "double"
										},
										"type": "array"
									}
								},
								"required": [
									"ids"
								],
								"type": "object"
							}
						}
					}
				}
			}
		},
		"/companies/{id}": {
			"get": {
				"operationId": "GetCompany",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Company_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"tags": [
					"Company"
				],
				"security": [
					{
						"jwtToken": [
							"Company:Get"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			},
			"put": {
				"operationId": "UpdateCompany",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"allOf": [
										{
											"$ref": "#/components/schemas/Partial_Company_"
										}
									],
									"nullable": true
								}
							}
						}
					}
				},
				"tags": [
					"Company"
				],
				"security": [
					{
						"jwtToken": [
							"Company:Update"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Partial_Company_"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "DeleteCompany",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"success": {
											"type": "boolean"
										}
									},
									"required": [
										"success"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Company"
				],
				"security": [
					{
						"jwtToken": [
							"Company:Delete"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/companies/{id}/logo": {
			"put": {
				"operationId": "UpdateLogo",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"uploaded": {
											"type": "boolean"
										}
									},
									"required": [
										"uploaded"
									],
									"type": "object"
								}
							}
						}
					}
				},
				"tags": [
					"Company"
				],
				"security": [
					{
						"jwtToken": [
							"Company:Update"
						]
					}
				],
				"parameters": [
					{
						"in": "path",
						"name": "id",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/CreateProfilePictureProperties"
							}
						}
					}
				}
			}
		},
		"/auth/login": {
			"post": {
				"operationId": "LogIn",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LoginResponse"
								}
							}
						}
					}
				},
				"description": "Authenticates a user and initiates a session. This endpoint is responsible for\nvalidating user credentials (like email and password) and, if successful,\nissuing authentication tokens.\n\nOn successful authentication, it sets the necessary cookies for maintaining\nthe user's session. These include a token and a refresh token, which are\nused for maintaining session state and refreshing the session, respectively.\n\nThe actual authentication logic is managed by the authentication service,\nwhile this method serves as an interface between the HTTP request and the\nservice layer.",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "The login request body containing the user's login credentials.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LoginRequest",
								"description": "The login request body containing the user's login credentials."
							}
						}
					}
				}
			}
		},
		"/auth/login/2fa": {
			"post": {
				"operationId": "LogIn2Fa",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LoginResponse"
								}
							}
						}
					}
				},
				"description": "Authenticates a user with two-factor authentication (2FA). This endpoint extends the basic login \nfunctionality by adding a second layer of security. After the initial credentials (like email and password) \nare validated, this method requires a second verification step, typically a code from a device or app.\n\nSimilar to the basic login, upon successful authentication, it sets up the necessary cookies. However,\nthe focus here is on securely managing the 2FA process, ensuring that both the primary credentials \nand the 2FA verification are successful before issuing tokens.\n\nThis method also serves as a bridge between the HTTP request and the authentication service, \nspecifically handling the 2FA logic. It forwards the context and the 2FA credentials (like a verification code)\nto the service layer for processing.",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "The 2FA request body, containing both the user's initial login credentials and the 2FA verification code.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Login2FaRequest",
								"description": "The 2FA request body, containing both the user's initial login credentials and the 2FA verification code."
							}
						}
					}
				}
			}
		},
		"/auth/verify-account": {
			"post": {
				"operationId": "VerifyAccount",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/VerifyAccountResponse"
								}
							}
						}
					}
				},
				"description": "Processes user account verification requests. This endpoint is used to verify\na user's account typically after they have signed up. The verification is\nusually done using a token that is sent to the user's email.\n\nThe method takes a verification token as a query parameter and other relevant\ndata in the request body. It then interacts with the authentication service to\nvalidate the token and complete the verification process.",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": [
					{
						"description": "The verification token, usually passed as a query parameter.",
						"in": "query",
						"name": "v",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The request body containing any additional data needed for verification.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VerifyAccountRequest",
								"description": "The request body containing any additional data needed for verification."
							}
						}
					}
				}
			}
		},
		"/auth/refresh-token": {
			"get": {
				"operationId": "Refresh",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RefreshTokenResponse"
								}
							}
						}
					}
				},
				"description": "Refreshes the user's authentication tokens. This endpoint is used when the\ncurrent access token has expired, and a new access token is needed. The\nrefresh token, typically stored as a cookie, is used to safely generate a\nnew access token without requiring the user to log in again.\n\nUpon successful token refresh, new tokens are issued and set in the response\ncookies, ensuring continuous authenticated access for the user.",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": []
			}
		},
		"/auth/logout": {
			"get": {
				"operationId": "LogOut",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LogoutResponse"
								}
							}
						}
					}
				},
				"description": "Handles user logout by clearing the authentication cookies. This endpoint is\nresponsible for ending the user's session in a secure manner. It removes the\nsession tokens (access and refresh tokens) from the cookies, effectively\nlogging the user out of the application.\n\nThis method ensures that the session tokens are not only cleared from the\napplication's context but also from the client side by resetting the relevant\ncookies.",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": []
			}
		},
		"/auth/forgotten-password": {
			"post": {
				"operationId": "ForgottenPassword",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ForgottenPasswordResponse"
								}
							}
						}
					}
				},
				"description": "Handles forgotten password requests by initiating a password reset process.\nThis method is responsible for sending a password reset link or code to the\nuser's registered email address. It is an essential part of user account\nmanagement, especially in scenarios where a user has forgotten their password\nand needs to reset it.\n\nThe method accepts the user's email (or other identifying information) as part\nof the request body and passes this information to the authentication service\nto handle the sending of the reset link or code.",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": [],
				"requestBody": {
					"description": "The request body containing the necessary data for processing\nforgotten password requests, such as the user's email.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ForgottenPasswordRequest",
								"description": "The request body containing the necessary data for processing\nforgotten password requests, such as the user's email."
							}
						}
					}
				}
			}
		},
		"/auth/reset-password": {
			"post": {
				"operationId": "ResetPassword",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResetPasswordResponse"
								}
							}
						}
					}
				},
				"description": "Manages the password reset process for users. This endpoint is invoked when a\nuser wants to reset their password, typically following a forgotten password\nscenario. It requires a unique token, usually sent to the user's email, along\nwith their new password.\n\nThe token ensures that the request is legitimate and is often passed as a query\nparameter. The method verifies the token's validity and, if successful, updates\nthe user's password with the new one provided in the request body.\n\nThis method is a key component in ensuring user account security, allowing users\nto regain access to their account securely after losing their password.",
				"tags": [
					"Authentication"
				],
				"security": [],
				"parameters": [
					{
						"description": "The verification token, typically provided as a query parameter,\nused to validate the password reset request.",
						"in": "query",
						"name": "v",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"description": "The request body, containing the new password and any additional\ndata required for the password reset.",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ResetPasswordRequest",
								"description": "The request body, containing the new password and any additional\ndata required for the password reset."
							}
						}
					}
				}
			}
		},
		"/auth/me": {
			"get": {
				"operationId": "GetMe",
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Partial_User_"
								}
							}
						}
					}
				},
				"description": "Retrieves the authenticated user's profile information. This endpoint is typically\ncalled after a user has logged in and received an authentication token. It's used\nto fetch the user's data such as name, email, and any other relevant profile information.\n\nThe method requires an authentication token, usually provided in the request headers,\nto verify the user's identity. Upon successful authentication, it returns the user's\nprofile data. This ensures that only authenticated users can access their own profile\ninformation, maintaining privacy and security.\n\nThis method is crucial for personalized user experiences, allowing the system to\nidentify and provide specific information relevant to the logged-in user.",
				"tags": [
					"Authentication"
				],
				"security": [
					{
						"jwtToken": []
					}
				],
				"parameters": []
			}
		}
	},
	"servers": [
		{
			"url": "/"
		}
	]
}